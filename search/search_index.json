{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\._]"},"docs":[{"location":"","text":"Welcome to Discord.gd Documentation \u00b6 Download Latest Zip View in AssetLib A Godot plugin to interact with the Discord Bot API. Make Discord Bots in Godot! \u00b6 Quick Tips to Browse through the documentation \u00b6 Tables can be sorted by clicking the titles of the columns Press S or F or / to open the search bar The menu on the right can be used to quickly jump to sections","title":"Home"},{"location":"#welcome-to-discordgd-documentation","text":"Download Latest Zip View in AssetLib","title":"Welcome to Discord.gd Documentation"},{"location":"#a-godot-plugin-to-interact-with-the-discord-bot-api-make-discord-bots-in-godot","text":"","title":"A Godot plugin to interact with the Discord Bot API. Make Discord Bots in Godot!"},{"location":"#quick-tips-to-browse-through-the-documentation","text":"Tables can be sorted by clicking the titles of the columns Press S or F or / to open the search bar The menu on the right can be used to quickly jump to sections","title":"Quick Tips to Browse through the documentation"},{"location":"advanced-bot/","text":"Advanced Bot \u00b6 Features \u00b6 Separate command files Application commands Message Buttons commands Select menu commands Github Repo \u00b6","title":"Advanced Bot"},{"location":"advanced-bot/#advanced-bot","text":"","title":"Advanced Bot"},{"location":"advanced-bot/#features","text":"Separate command files Application commands Message Buttons commands Select menu commands","title":"Features"},{"location":"advanced-bot/#github-repo","text":"","title":"Github Repo"},{"location":"getting-started/","text":"After the installation , add the DiscordBot node as a child to any node. The scene tree should look like this Now you can add a script to any node besides the DiscordBot node, here let's add the script to the Test node. The compulsory requirement is the bot TOKEN which can be obtained from Discord Developers After setting the TOKEN , calling .login() will login the bot and establish a connection to the Discord gateway. If everything went well, the DiscordBot will emit the bot_ready signal. Now you need to connect the signals which you want from DiscordBot to the Test node. That's it, you can connect the other signals too like message_create , guild_create , etc. See simple bot \u00b6","title":"Getting Started"},{"location":"getting-started/#see-simple-bot","text":"","title":"See simple bot"},{"location":"how-to-update/","text":"How to update \u00b6 As of Godot 3, there is no proper way to update plugins in a clean method. As a workaround: Disable the plugin (Project Settings > Plugins > Discord.gd) Close all your scenes (or close Godot entirely) Delete the addons/discord.gd folder from your project directory Follow the installation steps here to install the new version","title":"How to Update"},{"location":"how-to-update/#how-to-update","text":"As of Godot 3, there is no proper way to update plugins in a clean method. As a workaround: Disable the plugin (Project Settings > Plugins > Discord.gd) Close all your scenes (or close Godot entirely) Delete the addons/discord.gd folder from your project directory Follow the installation steps here to install the new version","title":"How to update"},{"location":"installation/","text":"Download the Github repository, either the main branch or a tagged branch eg. 1.0.0 Copy the folder discord_gd from addons from the downloaded content to the addons folder in the directory of your project. If your project does not already have a addons folder, make a new one. Your project folder should look something like this: In the top menu bar of the Godot Editor, click on Project then Project Settings. In the new dialog Window that pops up, click on Plugins. Here make sure to check the Enable checkbox. You might need to close and open the Project for the plugin to load. To ensure the plugin is installed, check whether the DiscordBot node is added to Godot.","title":"Installation"},{"location":"simple-bot/","text":"Simple Bot \u00b6 extends Node2D func _ready(): var bot = DiscordBot.new() add_child(bot) bot.connect(\"bot_ready\", self, \"_on_bot_ready\") bot.connect(\"message_create\", self, \"_on_message_create\") bot.TOKEN = \"your_bot_token_here\" bot.login() func _on_bot_ready(bot: DiscordBot): print(\"Logged in as \" + bot.user.username + \"#\" + bot.user.discriminator) print(\"Listening on \" + str(bot.channels.size()) + \" channels and \" + str(bot.guilds.size()) + \" guilds.\") func _on_message_create(bot: DiscordBot, message: Message, channel: Dictionary): var content = message.content print(\"Received message: \" + content) bot.send(message, \"I got a message here\") More Examples \u00b6","title":"Simple Bot"},{"location":"simple-bot/#simple-bot","text":"extends Node2D func _ready(): var bot = DiscordBot.new() add_child(bot) bot.connect(\"bot_ready\", self, \"_on_bot_ready\") bot.connect(\"message_create\", self, \"_on_message_create\") bot.TOKEN = \"your_bot_token_here\" bot.login() func _on_bot_ready(bot: DiscordBot): print(\"Logged in as \" + bot.user.username + \"#\" + bot.user.discriminator) print(\"Listening on \" + str(bot.channels.size()) + \" channels and \" + str(bot.guilds.size()) + \" guilds.\") func _on_message_create(bot: DiscordBot, message: Message, channel: Dictionary): var content = message.content print(\"Received message: \" + content) bot.send(message, \"I got a message here\")","title":"Simple Bot"},{"location":"simple-bot/#more-examples","text":"","title":"More Examples"},{"location":"classes/applicationcommand/","text":"ApplicationCommand \u00b6 Extends: None See Discord ApplicationCommand docs Represents a Discord application command. Description \u00b6 Provides an interface to make and respond to Discord application commands. Properties \u00b6 Type Name Description String name The name of this command String description The description of this command int type? The type of the command (one of 1, 2, 3) String id The id of the command String application_id The id of the parent application String guild_id? The guild id of the command, if not global Array options The parameters for the command (only for CHAT_INPUT commands) bool default_permission Whether the command is enabled by default (default is true ) String version Autoincrementing version identifier updated during substantial record hanges Methods \u00b6 Returns Definition String get_id() String get_type() ApplicationCommand set_type(new_type: String) String get_application_id() ApplicationCommand set_name(new_name: String) String get_name() ApplicationCommand set_description(new_description: String) String get_description() String get_guild_id() ApplicationCommand set_options(new_options: Array\\<Dictionary>) Array\\<Dictionary> get_options() ApplicationCommand add_option(option_data: Dictionary) Dictionary static sub_command_option(name: String, description: String, data?: Dictionary) Dictionary static sub_command_group_option(name: String, description: String, data?: Dictionary) Dictionary static string_option(name: String, description: String, data?: Dictionary) Dictionary static integer_option(name: String, description: String, data?: Dictionary) Dictionary static boolean_option(name: String, description: String, data?: Dictionary) Dictionary static user_option(name: String, description: String, data?: Dictionary) Dictionary static channel_option(name: String, description: String, data?: Dictionary) Dictionary static role_option(name: String, description: String, data?: Dictionary) Dictionary static mentionable_option(name: String, description: String, data?: Dictionary) Dictionary static number_option(name: String, description: String, data?: Dictionary) Dictionary static choice(name: String, value: Variant) Dictionary print() Method Descriptions \u00b6 get_id() \u00b6 Returns the id of the command. Returns: String get_type() \u00b6 Returns the type of the menu. One of ( CHAT_INPUT , MESSAGE or USER ) Returns: String set_type(new_type) \u00b6 Sets the type of this command. Returns: ApplicationCommand See Discord application command types docs Type Parameter String new_type get_application_id() \u00b6 Returns the application_id of the parent application. Returns: String set_name(new_name) \u00b6 Sets the name of the command. Returns: ApplicationCommand Type Parameter String new_name get_name() \u00b6 Returns the name of the command. Returns: String set_description(new_description) \u00b6 Sets the description of the command. Returns: ApplicationCommand Type Parameter String new_description get_description() \u00b6 Returns the description of the command. Returns: String get_guild_id() \u00b6 Returns the guild_id of the command. Returns: String set_options(new_options) \u00b6 (For advanced users) Directly set the options of the command by passing an Array of Dictionary options. Returns: ApplicationCommand Note Use ApplicationCommand.add_option() instead for easier usage. Type Parameter Array new_options Examples \u00b6 Set the options to a single option var cmd1 = ApplicationCommand.new().set_name(\"test\")\\ .set_description(\"Testing description\") cmd1.set_options( [{ \"type\": 3, \"name\": \"string-option\", \"description\": \"This is a string option\" }] ) get_options() \u00b6 Returns the options of the command. Returns: Array add_option(option_data) \u00b6 Easy way to add options to the command. Returns: ApplicationCommand Type Parameter Description Dictionary option_data Dictionary containing the option data To get the option_data use any of the static option generator methods like sub_command_option() , |sub_command_group_option() , string_option() , integer_option() , boolean_option() , user_option() , channel_option() , role_option() , mentionable_option() or number_option() of the ApplicationCommand class. Examples \u00b6 Add a string option var cmd1 = ApplicationCommand.new().set_name(\"view\")\\ .set_description(\"View an item.\") cmd1.add_option( ApplicationCommand.string_option(\"item\", \"Name of the item to view\") ) Add a user option var cmd1 = ApplicationCommand.new().set_name(\"donate\")\\ .set_description(\"Give someone money.\") cmd1.add_option( ApplicationCommand.user_option(\"user\", \"The person to donate to.\", { # Make this option compulsory \"required\": true }) ) Add a channel option var cmd1 = ApplicationCommand.new().set_name(\"notify\")\\ .set_description(\"Change the notification channel.\") cmd1.add_option( ApplicationCommand.channel_option(\"channel\", \"The channel where to send the notifications.\", { # Make this option compulsory \"required\": true }) ) Add an autocompleted string option var cmd1 = ApplicationCommand.new().set_name(\"autocomplete-testing\")\\ .set_description(\"Autocomplete command test.\") cmd1.add_option( ApplicationCommand.string_option(\"autocomplete-option\", \"This is an autocompleted option\", { \"autocomplete\": true, \"required\": true }) ) # Then to respond to the autocomplete, in the DiscordBot.interaction_create: if interaction.is_autocomplete(): print(\"autocomplete data \", interaction.data) interaction.respond_autocomplete([ ApplicationCommand.choice(\"This is autocompleted choice 1\", \"autocomplete_choice_1\") ApplicationCommand.choice(\"This is autocompleted choice 2\", \"autocomplete_choice_2\") ApplicationCommand.choice(\"This is autocompleted choice 3\", \"autocomplete_choice_3\") ]) return sub_command_option(name, description, data?) \u00b6 Generates data for a sub command option. Returns: Dictionary See Discord application command option docs Type Parameter String name String description Dictionary data sub_command_group_option(name, description, data?) \u00b6 Generates data for a sub command group option. Returns: Dictionary See Discord application command option docs Type Parameter String name String description Dictionary data Examples \u00b6 Add a sub command group with two sub commands var cmd1 = ApplicationCommand.new().set_name(\"market\")\\ .set_description(\"Buy or sell items.\") # Add a sub command group cmd1.add_option( ApplicationCommand.sub_commang_group(\"items\", \"Buy or sell items\", { \"options\": [ # Add first sub command ApplicationCommand.sub_command_option(\"buy\", \"Buy an item\"), # Add second sub command ApplicationCommand.sub_command_option(\"sell\", \"Sell an item\") ] }) ) string_option(name, description, data?) \u00b6 Generates data for a string option. Returns: Dictionary See Discord application command option docs Type Parameter String name String description Dictionary data Examples \u00b6 Add a single string option var cmd1 = ApplicationCommand.new().set_name(\"set-country\")\\ .set_description(\"Sets your country.\") cmd1.add_option( ApplicationCommand.string_option(\"country\", \"The country name\", { # Make this option compulsory \"required\": true }) ) Add multiple string options var cmd1 = ApplicationCommand.new().set_name(\"set-location\")\\ .set_description(\"Sets your location.\") cmd1.add_option( ApplicationCommand.string_option(\"continent\", \"The name of the continent\", { # Make this option compulsory \"required\": true, # Provide a fixed set of choices to choose from \"choices\": [ ApplicationCommand.choice(\"Asia\", \"asia\"), ApplicationCommand.choice(\"Europe\", \"europe\"), ApplicationCommand.choice(\"South America\", \"south-america\"), ApplicationCommand.choice(\"North America\", \"north-america\"), ApplicationCommand.choice(\"Antartica\", \"antartica\"), ApplicationCommand.choice(\"Africa\", \"africa\"), ApplicationCommand.choice(\"Oceania\", \"oceania\"), ] }) ) cmd1.add_option( ApplicationCommand.string_option(\"country\", \"The name of the country\", { \"autocomplete\": true }) ) integer_option(name, description, data?) \u00b6 Generates data for a integer option. Returns: Dictionary See Discord application command option docs Type Parameter String name String description Dictionary data Examples \u00b6 Add a single integer option (with min and max values) var cmd1 = ApplicationCommand.new().set_name(\"set-age\")\\ .set_description(\"Sets your age.\") cmd1.add_option( ApplicationCommand.integer_option(\"age\", \"The value of your age\", { \"required\": true, \"min_value\": 13, # Minimum value \"max_value\": 120 # Maximum value }) ) boolean_option(name, description, data?) \u00b6 Generates data for a boolean option. Returns: Dictionary See Discord application command option docs Type Parameter String name String description Dictionary data Examples \u00b6 Add a single boolean option var cmd1 = ApplicationCommand.new().set_name(\"set-afk\")\\ .set_description(\"Set whether you are AFK.\") cmd1.add_option( ApplicationCommand.boolean_option(\"afk\", \"Set to True if you are AFK\") ) user_option(name, description, data?) \u00b6 Generates data for a user option. Returns: Dictionary See Discord application command option docs Type Parameter String name String description Dictionary data Examples \u00b6 Add a single user option var cmd1 = ApplicationCommand.new().set_name(\"profile\")\\ .set_description(\"Shows the user profile.\") cmd1.add_option( ApplicationCommand.user_option(\"user\", \"The user whose profile to show\") ) channel_option(name, description, data?) \u00b6 Generates data for a channel option. Returns: Dictionary See Discord application command option docs Type Parameter String name String description Dictionary data Examples \u00b6 Add a single channel option var cmd1 = ApplicationCommand.new().set_name(\"set-logs\")\\ .set_description(\"Set the channel to send logs.\") cmd1.add_option( ApplicationCommand.channel_option(\"channel\", \"The channel where to send logs\", { # Allow only guild text channels \"channel_types\": [\"GUILD_TEXT\"] }) ) role_option(name, description, data?) \u00b6 Generates data for a role option. Returns: Dictionary See Discord application command option docs Type Parameter String name String description Dictionary data mentionable_option(name, description, data?) \u00b6 Generates data for a mentionable option. Returns: Dictionary See Discord application command option docs Type Parameter String name String description Dictionary data number_option(name, description, data?) \u00b6 Generates data for a number option. Returns: Dictionary See Discord application command option docs Type Parameter String name String description Dictionary data choice(name, value) \u00b6 Generates data for a command option choice. Returns: Dictionary See Discord application command option choice docs Type Parameter String name Variant value Examples \u00b6 Choices for a string option ApplicationCommand.choice(\"A red apple\", \"apple\") ApplicationCommand.choice(\"A ripe banana\", \"banana\") Choices for a integer option ApplicationCommand.choice(\"One\", 1) ApplicationCommand.choice(\"Two\", 2) ApplicationCommand.choice(\"Dozen\", 12) Choices for a number option ApplicationCommand.choice(\"Half\", 0.5) ApplicationCommand.choice(\"Quarter\", 0.25) ApplicationCommand.choice(\"One and a half\", 1.5) print() \u00b6 Prints the ApplicationCommand. Returns: void Note Use this instead of print(Message) Generates data for a command option choice. Registering Application Commands \u00b6 See Discord registering a command docs Use the DiscordBot.register_command() and DiscordBot.register_commands() methods to register commands. While developing commands it's better to use guild level commands since they update instantly while global commands take upto 1hr to update. Examples \u00b6 Making a MESSAGE command var cmd1 = ApplicationCommand.new().set_type(\"MESSAGE\").set_name(\"Bookmark this message\") bot.register_command(cmd1) Making a USER command var cmd1 = ApplicationCommand.new().set_type(\"USEr\").set_name(\"High five this user\") bot.register_command(cmd1) Responding to Application Commands \u00b6 Application commands will fire the DiscordBot.interaction_create signal. Examples \u00b6 Respond to an application command # In the DiscordBot.interaction_create, func _on_bot_interaction_create(bot: DiscordBot, interaction: DiscordInteraction): if not interaction.is_command(): return print(\"received command: \", interaction.data) var command_data = interaction.data var type = command_data.type match command_data.name: \"ping\": interaction.reply({ \"embeds\": [ MessageEmbed.new().set_title(\"Pong!\") ] }) \"long-command\": # Incase your processing requires # more than 3s, you can use defer_reply() interaction.defer_reply() # Fake delay of 5s yield(get_tree().create_timer(5), \"timeout\") # Edit the original message interaction.edit_reply({ \"content\": \"After processing for 5s the reply is edited!\" }) _: # Default case interaction.reply({ \"content\": \"Received command. But logic is not implemented.\", })","title":"ApplicationCommand"},{"location":"classes/applicationcommand/#applicationcommand","text":"Extends: None See Discord ApplicationCommand docs Represents a Discord application command.","title":"ApplicationCommand"},{"location":"classes/applicationcommand/#description","text":"Provides an interface to make and respond to Discord application commands.","title":"Description"},{"location":"classes/applicationcommand/#properties","text":"Type Name Description String name The name of this command String description The description of this command int type? The type of the command (one of 1, 2, 3) String id The id of the command String application_id The id of the parent application String guild_id? The guild id of the command, if not global Array options The parameters for the command (only for CHAT_INPUT commands) bool default_permission Whether the command is enabled by default (default is true ) String version Autoincrementing version identifier updated during substantial record hanges","title":"Properties"},{"location":"classes/applicationcommand/#methods","text":"Returns Definition String get_id() String get_type() ApplicationCommand set_type(new_type: String) String get_application_id() ApplicationCommand set_name(new_name: String) String get_name() ApplicationCommand set_description(new_description: String) String get_description() String get_guild_id() ApplicationCommand set_options(new_options: Array\\<Dictionary>) Array\\<Dictionary> get_options() ApplicationCommand add_option(option_data: Dictionary) Dictionary static sub_command_option(name: String, description: String, data?: Dictionary) Dictionary static sub_command_group_option(name: String, description: String, data?: Dictionary) Dictionary static string_option(name: String, description: String, data?: Dictionary) Dictionary static integer_option(name: String, description: String, data?: Dictionary) Dictionary static boolean_option(name: String, description: String, data?: Dictionary) Dictionary static user_option(name: String, description: String, data?: Dictionary) Dictionary static channel_option(name: String, description: String, data?: Dictionary) Dictionary static role_option(name: String, description: String, data?: Dictionary) Dictionary static mentionable_option(name: String, description: String, data?: Dictionary) Dictionary static number_option(name: String, description: String, data?: Dictionary) Dictionary static choice(name: String, value: Variant) Dictionary print()","title":"Methods"},{"location":"classes/applicationcommand/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"classes/applicationcommand/#get_id","text":"Returns the id of the command. Returns: String","title":"get_id()"},{"location":"classes/applicationcommand/#get_type","text":"Returns the type of the menu. One of ( CHAT_INPUT , MESSAGE or USER ) Returns: String","title":"get_type()"},{"location":"classes/applicationcommand/#set_typenew_type","text":"Sets the type of this command. Returns: ApplicationCommand See Discord application command types docs Type Parameter String new_type","title":"set_type(new_type)"},{"location":"classes/applicationcommand/#get_application_id","text":"Returns the application_id of the parent application. Returns: String","title":"get_application_id()"},{"location":"classes/applicationcommand/#set_namenew_name","text":"Sets the name of the command. Returns: ApplicationCommand Type Parameter String new_name","title":"set_name(new_name)"},{"location":"classes/applicationcommand/#get_name","text":"Returns the name of the command. Returns: String","title":"get_name()"},{"location":"classes/applicationcommand/#set_descriptionnew_description","text":"Sets the description of the command. Returns: ApplicationCommand Type Parameter String new_description","title":"set_description(new_description)"},{"location":"classes/applicationcommand/#get_description","text":"Returns the description of the command. Returns: String","title":"get_description()"},{"location":"classes/applicationcommand/#get_guild_id","text":"Returns the guild_id of the command. Returns: String","title":"get_guild_id()"},{"location":"classes/applicationcommand/#set_optionsnew_options","text":"(For advanced users) Directly set the options of the command by passing an Array of Dictionary options. Returns: ApplicationCommand Note Use ApplicationCommand.add_option() instead for easier usage. Type Parameter Array new_options","title":"set_options(new_options)"},{"location":"classes/applicationcommand/#examples","text":"Set the options to a single option var cmd1 = ApplicationCommand.new().set_name(\"test\")\\ .set_description(\"Testing description\") cmd1.set_options( [{ \"type\": 3, \"name\": \"string-option\", \"description\": \"This is a string option\" }] )","title":"Examples"},{"location":"classes/applicationcommand/#get_options","text":"Returns the options of the command. Returns: Array","title":"get_options()"},{"location":"classes/applicationcommand/#add_optionoption_data","text":"Easy way to add options to the command. Returns: ApplicationCommand Type Parameter Description Dictionary option_data Dictionary containing the option data To get the option_data use any of the static option generator methods like sub_command_option() , |sub_command_group_option() , string_option() , integer_option() , boolean_option() , user_option() , channel_option() , role_option() , mentionable_option() or number_option() of the ApplicationCommand class.","title":"add_option(option_data)"},{"location":"classes/applicationcommand/#examples_1","text":"Add a string option var cmd1 = ApplicationCommand.new().set_name(\"view\")\\ .set_description(\"View an item.\") cmd1.add_option( ApplicationCommand.string_option(\"item\", \"Name of the item to view\") ) Add a user option var cmd1 = ApplicationCommand.new().set_name(\"donate\")\\ .set_description(\"Give someone money.\") cmd1.add_option( ApplicationCommand.user_option(\"user\", \"The person to donate to.\", { # Make this option compulsory \"required\": true }) ) Add a channel option var cmd1 = ApplicationCommand.new().set_name(\"notify\")\\ .set_description(\"Change the notification channel.\") cmd1.add_option( ApplicationCommand.channel_option(\"channel\", \"The channel where to send the notifications.\", { # Make this option compulsory \"required\": true }) ) Add an autocompleted string option var cmd1 = ApplicationCommand.new().set_name(\"autocomplete-testing\")\\ .set_description(\"Autocomplete command test.\") cmd1.add_option( ApplicationCommand.string_option(\"autocomplete-option\", \"This is an autocompleted option\", { \"autocomplete\": true, \"required\": true }) ) # Then to respond to the autocomplete, in the DiscordBot.interaction_create: if interaction.is_autocomplete(): print(\"autocomplete data \", interaction.data) interaction.respond_autocomplete([ ApplicationCommand.choice(\"This is autocompleted choice 1\", \"autocomplete_choice_1\") ApplicationCommand.choice(\"This is autocompleted choice 2\", \"autocomplete_choice_2\") ApplicationCommand.choice(\"This is autocompleted choice 3\", \"autocomplete_choice_3\") ]) return","title":"Examples"},{"location":"classes/applicationcommand/#sub_command_optionname-description-data","text":"Generates data for a sub command option. Returns: Dictionary See Discord application command option docs Type Parameter String name String description Dictionary data","title":"sub_command_option(name, description, data?)"},{"location":"classes/applicationcommand/#sub_command_group_optionname-description-data","text":"Generates data for a sub command group option. Returns: Dictionary See Discord application command option docs Type Parameter String name String description Dictionary data","title":"sub_command_group_option(name, description, data?)"},{"location":"classes/applicationcommand/#examples_2","text":"Add a sub command group with two sub commands var cmd1 = ApplicationCommand.new().set_name(\"market\")\\ .set_description(\"Buy or sell items.\") # Add a sub command group cmd1.add_option( ApplicationCommand.sub_commang_group(\"items\", \"Buy or sell items\", { \"options\": [ # Add first sub command ApplicationCommand.sub_command_option(\"buy\", \"Buy an item\"), # Add second sub command ApplicationCommand.sub_command_option(\"sell\", \"Sell an item\") ] }) )","title":"Examples"},{"location":"classes/applicationcommand/#string_optionname-description-data","text":"Generates data for a string option. Returns: Dictionary See Discord application command option docs Type Parameter String name String description Dictionary data","title":"string_option(name, description, data?)"},{"location":"classes/applicationcommand/#examples_3","text":"Add a single string option var cmd1 = ApplicationCommand.new().set_name(\"set-country\")\\ .set_description(\"Sets your country.\") cmd1.add_option( ApplicationCommand.string_option(\"country\", \"The country name\", { # Make this option compulsory \"required\": true }) ) Add multiple string options var cmd1 = ApplicationCommand.new().set_name(\"set-location\")\\ .set_description(\"Sets your location.\") cmd1.add_option( ApplicationCommand.string_option(\"continent\", \"The name of the continent\", { # Make this option compulsory \"required\": true, # Provide a fixed set of choices to choose from \"choices\": [ ApplicationCommand.choice(\"Asia\", \"asia\"), ApplicationCommand.choice(\"Europe\", \"europe\"), ApplicationCommand.choice(\"South America\", \"south-america\"), ApplicationCommand.choice(\"North America\", \"north-america\"), ApplicationCommand.choice(\"Antartica\", \"antartica\"), ApplicationCommand.choice(\"Africa\", \"africa\"), ApplicationCommand.choice(\"Oceania\", \"oceania\"), ] }) ) cmd1.add_option( ApplicationCommand.string_option(\"country\", \"The name of the country\", { \"autocomplete\": true }) )","title":"Examples"},{"location":"classes/applicationcommand/#integer_optionname-description-data","text":"Generates data for a integer option. Returns: Dictionary See Discord application command option docs Type Parameter String name String description Dictionary data","title":"integer_option(name, description, data?)"},{"location":"classes/applicationcommand/#examples_4","text":"Add a single integer option (with min and max values) var cmd1 = ApplicationCommand.new().set_name(\"set-age\")\\ .set_description(\"Sets your age.\") cmd1.add_option( ApplicationCommand.integer_option(\"age\", \"The value of your age\", { \"required\": true, \"min_value\": 13, # Minimum value \"max_value\": 120 # Maximum value }) )","title":"Examples"},{"location":"classes/applicationcommand/#boolean_optionname-description-data","text":"Generates data for a boolean option. Returns: Dictionary See Discord application command option docs Type Parameter String name String description Dictionary data","title":"boolean_option(name, description, data?)"},{"location":"classes/applicationcommand/#examples_5","text":"Add a single boolean option var cmd1 = ApplicationCommand.new().set_name(\"set-afk\")\\ .set_description(\"Set whether you are AFK.\") cmd1.add_option( ApplicationCommand.boolean_option(\"afk\", \"Set to True if you are AFK\") )","title":"Examples"},{"location":"classes/applicationcommand/#user_optionname-description-data","text":"Generates data for a user option. Returns: Dictionary See Discord application command option docs Type Parameter String name String description Dictionary data","title":"user_option(name, description, data?)"},{"location":"classes/applicationcommand/#examples_6","text":"Add a single user option var cmd1 = ApplicationCommand.new().set_name(\"profile\")\\ .set_description(\"Shows the user profile.\") cmd1.add_option( ApplicationCommand.user_option(\"user\", \"The user whose profile to show\") )","title":"Examples"},{"location":"classes/applicationcommand/#channel_optionname-description-data","text":"Generates data for a channel option. Returns: Dictionary See Discord application command option docs Type Parameter String name String description Dictionary data","title":"channel_option(name, description, data?)"},{"location":"classes/applicationcommand/#examples_7","text":"Add a single channel option var cmd1 = ApplicationCommand.new().set_name(\"set-logs\")\\ .set_description(\"Set the channel to send logs.\") cmd1.add_option( ApplicationCommand.channel_option(\"channel\", \"The channel where to send logs\", { # Allow only guild text channels \"channel_types\": [\"GUILD_TEXT\"] }) )","title":"Examples"},{"location":"classes/applicationcommand/#role_optionname-description-data","text":"Generates data for a role option. Returns: Dictionary See Discord application command option docs Type Parameter String name String description Dictionary data","title":"role_option(name, description, data?)"},{"location":"classes/applicationcommand/#mentionable_optionname-description-data","text":"Generates data for a mentionable option. Returns: Dictionary See Discord application command option docs Type Parameter String name String description Dictionary data","title":"mentionable_option(name, description, data?)"},{"location":"classes/applicationcommand/#number_optionname-description-data","text":"Generates data for a number option. Returns: Dictionary See Discord application command option docs Type Parameter String name String description Dictionary data","title":"number_option(name, description, data?)"},{"location":"classes/applicationcommand/#choicename-value","text":"Generates data for a command option choice. Returns: Dictionary See Discord application command option choice docs Type Parameter String name Variant value","title":"choice(name, value)"},{"location":"classes/applicationcommand/#examples_8","text":"Choices for a string option ApplicationCommand.choice(\"A red apple\", \"apple\") ApplicationCommand.choice(\"A ripe banana\", \"banana\") Choices for a integer option ApplicationCommand.choice(\"One\", 1) ApplicationCommand.choice(\"Two\", 2) ApplicationCommand.choice(\"Dozen\", 12) Choices for a number option ApplicationCommand.choice(\"Half\", 0.5) ApplicationCommand.choice(\"Quarter\", 0.25) ApplicationCommand.choice(\"One and a half\", 1.5)","title":"Examples"},{"location":"classes/applicationcommand/#print","text":"Prints the ApplicationCommand. Returns: void Note Use this instead of print(Message) Generates data for a command option choice.","title":"print()"},{"location":"classes/applicationcommand/#registering-application-commands","text":"See Discord registering a command docs Use the DiscordBot.register_command() and DiscordBot.register_commands() methods to register commands. While developing commands it's better to use guild level commands since they update instantly while global commands take upto 1hr to update.","title":"Registering Application Commands"},{"location":"classes/applicationcommand/#examples_9","text":"Making a MESSAGE command var cmd1 = ApplicationCommand.new().set_type(\"MESSAGE\").set_name(\"Bookmark this message\") bot.register_command(cmd1) Making a USER command var cmd1 = ApplicationCommand.new().set_type(\"USEr\").set_name(\"High five this user\") bot.register_command(cmd1)","title":"Examples"},{"location":"classes/applicationcommand/#responding-to-application-commands","text":"Application commands will fire the DiscordBot.interaction_create signal.","title":"Responding to Application Commands"},{"location":"classes/applicationcommand/#examples_10","text":"Respond to an application command # In the DiscordBot.interaction_create, func _on_bot_interaction_create(bot: DiscordBot, interaction: DiscordInteraction): if not interaction.is_command(): return print(\"received command: \", interaction.data) var command_data = interaction.data var type = command_data.type match command_data.name: \"ping\": interaction.reply({ \"embeds\": [ MessageEmbed.new().set_title(\"Pong!\") ] }) \"long-command\": # Incase your processing requires # more than 3s, you can use defer_reply() interaction.defer_reply() # Fake delay of 5s yield(get_tree().create_timer(5), \"timeout\") # Edit the original message interaction.edit_reply({ \"content\": \"After processing for 5s the reply is edited!\" }) _: # Default case interaction.reply({ \"content\": \"Received command. But logic is not implemented.\", })","title":"Examples"},{"location":"classes/bitfield/","text":"BitField \u00b6 Extends: None Data structure that makes it easier to intract with a bitfield Description \u00b6 A base data structure which defines a bitfield to implement flags and permissions for Discord. Properties \u00b6 Type Name Description int bitfield The bitfield of the packed bits Dictionary FLAGS Numeric bitfield flags (Defined in extension class) Methods \u00b6 Returns Definition Bitfield add(bit) bool any(bit) bool equals(bit) bool has(bit) Array missing(bit) Bitfield remove(bit) Dictionary serialize() Array to_array() int resolve(bit) Method Descriptions \u00b6 add(bit) \u00b6 Adds bit to these ones. Returns: BitField Type Parameter Description Variant bit The bit(s) to add Here the bit is any data that can be resolved to give a bitfield. This can be: - A bit number - A string flag of the bitfield - An instance of BitField - An Array of data that can be resolved to give a bitfield any(bit) \u00b6 Checks whether the bitfield has a bit, or any of multiple bits. Returns: bool Type Parameter Description Variant bit The bit(s) to check for equals(bit) \u00b6 Checks if this bitfield equals another. Returns: bool Type Parameter Description Variant bit The bit(s) to check for has(bit) \u00b6 Checks whether the bitfield has a bit, or multiple bits. Returns: bool Type Parameter Description Variant bit The bit(s) to check for missing(bit) \u00b6 Returns all given bits that are missing from the bitfield. Returns: Array Note Implemented by the children classes. Type Parameter Description Variant bit The bit(s) to check for remove(bit) \u00b6 Removes bits from these. Returns: BitField Type Parameter Description Variant bit The bit(s) to check for serialize() \u00b6 Returns a dictionary mapping flag names to a boolean indicating whether the bit is available. Returns: Dictionary to_array() \u00b6 Returns an Array of flag names based on the bits available. Returns: Array resolve(bit) \u00b6 Resolves bitfields to their numeric form. Returns: int Type Parameter Description Variant bit The bit(s) to resolve","title":"Bitfield"},{"location":"classes/bitfield/#bitfield","text":"Extends: None Data structure that makes it easier to intract with a bitfield","title":"BitField"},{"location":"classes/bitfield/#description","text":"A base data structure which defines a bitfield to implement flags and permissions for Discord.","title":"Description"},{"location":"classes/bitfield/#properties","text":"Type Name Description int bitfield The bitfield of the packed bits Dictionary FLAGS Numeric bitfield flags (Defined in extension class)","title":"Properties"},{"location":"classes/bitfield/#methods","text":"Returns Definition Bitfield add(bit) bool any(bit) bool equals(bit) bool has(bit) Array missing(bit) Bitfield remove(bit) Dictionary serialize() Array to_array() int resolve(bit)","title":"Methods"},{"location":"classes/bitfield/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"classes/bitfield/#addbit","text":"Adds bit to these ones. Returns: BitField Type Parameter Description Variant bit The bit(s) to add Here the bit is any data that can be resolved to give a bitfield. This can be: - A bit number - A string flag of the bitfield - An instance of BitField - An Array of data that can be resolved to give a bitfield","title":"add(bit)"},{"location":"classes/bitfield/#anybit","text":"Checks whether the bitfield has a bit, or any of multiple bits. Returns: bool Type Parameter Description Variant bit The bit(s) to check for","title":"any(bit)"},{"location":"classes/bitfield/#equalsbit","text":"Checks if this bitfield equals another. Returns: bool Type Parameter Description Variant bit The bit(s) to check for","title":"equals(bit)"},{"location":"classes/bitfield/#hasbit","text":"Checks whether the bitfield has a bit, or multiple bits. Returns: bool Type Parameter Description Variant bit The bit(s) to check for","title":"has(bit)"},{"location":"classes/bitfield/#missingbit","text":"Returns all given bits that are missing from the bitfield. Returns: Array Note Implemented by the children classes. Type Parameter Description Variant bit The bit(s) to check for","title":"missing(bit)"},{"location":"classes/bitfield/#removebit","text":"Removes bits from these. Returns: BitField Type Parameter Description Variant bit The bit(s) to check for","title":"remove(bit)"},{"location":"classes/bitfield/#serialize","text":"Returns a dictionary mapping flag names to a boolean indicating whether the bit is available. Returns: Dictionary","title":"serialize()"},{"location":"classes/bitfield/#to_array","text":"Returns an Array of flag names based on the bits available. Returns: Array","title":"to_array()"},{"location":"classes/bitfield/#resolvebit","text":"Resolves bitfields to their numeric form. Returns: int Type Parameter Description Variant bit The bit(s) to resolve","title":"resolve(bit)"},{"location":"classes/discordbot/","text":"DiscordBot \u00b6 Extends: HTTPRequest The main Node which interacts with the Discord API. Description \u00b6 A Node with the ability to communicate with the Discord websockets and REST API. Uses HTTPRequest internally. Uses signals to communicate websocket events from Discord to Godot. Properties \u00b6 Type Name Defaults Description String TOKEN \"\" The token of the Discord Bot from Discord Developers bool VERBOSE false If true, prints additional debug messages int INTENTS 513 Gateway Intents User user null The bot's user account Dictionary application {} Partial bot's application Dictionary guilds {} Guilds the bot is in mapped by their ids Dictionary channels {} Text channels and DM channels the bot can access mapped by their ids Methods \u00b6 Returns Definition int add_member_role(guild_id: String, member_id: String, role_id: String) Dictionary create_dm_channel(recipient_id: String) int create_reaction(message, custom_emoji: String) Variant delete(message: Message) int delete_reaction(message, custom_emoji: String, userid?: String) int delete_reactions(message, custom_emoji: String) Message edit(message: Message, content, options?: Dictionary) Array get_guild_emojis(guild_id: String) PoolByteArray get_guild_icon(guild_id: String, size?: int) Dictionary get_guild_member(guild_id: String, member_id: String) Array get_reactions(message, custom_emoji: String) void login() Permissions permissions_for(user_id: String, channel_id: String) Permissions permissions_in(channel_id: String) int remove_member_role(guild_id: String, member_id: String, role_id: String) Message reply(message: Message, content, options?: Dictionary) Message send(message_or_channelid: Variant, content, options?: Dictionary) void set_presence(options: Dictionary) Dictionary start_thread(message: Message, name: String, duration?: int) ApplicationCommand register_command(command: [ApplicationCommand](applicationcommand.md \"ApplicationCommand\"), guild_id?: String) Array register_commands(commands: Array, guild_id?: String) int delete_command(command_id: String, guild_id?: String) int delete_commands(guild_id?: String) ApplicationCommand get_command(command_id: String, guild_id?: String) Array get_commands(guild_id?: String) Signals \u00b6 See Discord Gateway Intents bot_ready(bot: DiscordBot) Emitted when the bot is logged in to Discord. bot : The Discord bot itself message_create(bot: DiscordBot, message: Message , channel: Dictionary) Emitted when the bot receives a new message. bot : The Discord bot itself message : The message that was received channel : The channel in which the message was received message_delete(bot: DiscordBot, message: Dictionary) Emitted when any message was deleted. bot : The Discord bot itself message : The message that was deleted message_reaction_add(bot: DiscordBot, data: Dictionary) Emitted when a user reacts to a message. bot : The Discord bot itself data : Data emitted with the event (See Event Fields ) message_reaction_remove(bot: DiscordBot, data: Dictionary) Emitted when a user removes a reaction from a message. bot : The Discord bot itself data : Data emitted with the event (See Event Fields ) message_reaction_remove_all(bot: DiscordBot, data: Dictionary) Emitted when a user explicitly removes all reactions from a message. bot : The Discord bot itself data : Data emitted with the event (See Event Fields ) message_reaction_remove_emoji(bot: DiscordBot, data: Dictionary) Emitted when a bot removes all instances of a given emoji from the reactions of a message. bot : The Discord bot itself data : Data emitted with the event (See Event Fields ) guild_create(bot: DiscordBot, guild: Dictionary) Emitted when the bot joins a new guild bot : The Discord bot itself guild : The guild that was just joined guild_update(bot: DiscordBot, guild: Dictionary) Emitted when the guild is updated bot : The Discord bot itself guild : Data of the guild that was updated guild_delete(bot: DiscordBot, guild_id: String) Emitted when the bot leaves a guild bot : The Discord bot itself guild_id : The id of the guild that the bot left interaction_create(bot: DiscordBot, interaction: DiscordInteraction ) Emitted when a new interaction is created bot : The Discord bot itself interaction : The interaction which was created Method Descriptions \u00b6 login() -> void \u00b6 Connects the bot to the Discord websocket gateway. Note If you want to set DiscordBot.INTENTS to a custom value, set it before calling DiscordBot.login() Note The DiscordBot.TOKEN must be set prior to calling DiscordBot.login() send(message_or_channelid, content, options?) \u00b6 Sends a message to a channel Returns: Promise<Message> Type Parameter Description Variant message_or_channelid Either the channelid or the message from which to extract the channel_id String | Dictionary content Either the message content, or a Dictionary of message options Dictionary options Additional message options options: Dictionary { embeds?: Array of Embed, files?: Array of files tts?: bool, allowed_mentions?: Dictionary (See https://discord.com/developers/docs/resources/channel#allowed-mentions-object) } Each file in files: Dictionary { data: PoolByteArray, the raw bytes of the file, name: String, the name of the file with extension, media_type: String, the MIME type of the file } Examples \u00b6 Send only a text message # This function is called when the message_create signal is emitted func _on_message_create(bot: DiscordBot, message: Message, channel: Dictionary): bot.send(message, \"hello\") # OR # bot.send(message.channel_id, \"hello\") # OR # bot.send(channel.id, \"hello\") Send only an embed # Make a new embed var embed = Embed.new().set_description(\"Hello\") # Send it bot.send(message, {\"embeds\": [embed]}) Send multiple embeds # Make two embeds var embed1 = Embed.new().set_description(\"This is embed 1\") var embed2 = Embed.new().set_description(\"This is embed 2\") # Snd them bot.send(message, {\"embeds\": [embed1, embed2]}) Send a text message and an embed # Make a new embed var embed = Embed.new().set_description(\"Hello\") # Pass is as options bot.send(message, \"hello\", {\"embeds\": [embed]}) Send only a image file # Read the image file var file = File.new() file.open(\"res://icon.png\", File.READ) # Get the raw bytes as a PoolByteArray var file_data: PoolByteArray = file.get_buffer(file.get_len()) file.close() # Make the file data object var file = { \"data\": file_data, \"name\": \"godot.png\", \"media_type\": \"image/png\" } # Send the file bot.send(message, \"Here is your file\", {\"files\": [file]}) Send multiple files #...code here to get the file_data_1 and file_data_2 as PoolByteArray var file1 = { \"data\": file_data_1, \"name\": \"file1.png\", \"media_type\": \"image/png\" } var file2 = { \"data\": file_data_2, \"name\": \"file2.png\", \"media_type\": \"image/png\" } bot.send(message, {\"files\": [file1, file2]}) Send a message as a reply to another message Note It's better to use DiscordBot.reply() to reply to messages, but if you want to use DiscordBot.send() , pass in a message_reference object to the options var embed = Embed.new().set_description(\"embeds can also be added\") bot.send(message, \"I replied to this message\", { \"embeds\": [embed], \"message_reference\": { \"message_id\": message.id } }) Send three messages in order yield(bot.send(message, \"This is message 1\"), \"completed\") yield(bot.send(message, \"This is message 2\"), \"completed\") yield(bot.send(message, \"This is message 3\"), \"completed\") edit(message, content, options?) \u00b6 Edits a sent message. Returns: Promise<Message> Type Parameter Description Message message The message to be edited String | Dictionary content Either the new message content, or new message options Dictionary options Additional message options Note The content and options are same as DiscordBot.send() Note Adding a file to a message that already has files results in both files existing on the new message. To only have the new file remain, use Message.slice_attachments() Examples \u00b6 Edit the content of a message # Send a new message # The yield is to ensure that the message is sent var msg = yield(bot.send(message, \"This is the original content\"), \"completed\") # Edit the sent message # Here the msg is passed to bot.edit() and not message, since we want to edit msg var edited_msg = yield(bot.edit(msg, \"This is the edited content\"), \"completed\") Edit the embed of a message # Make an embed var embed = Embed.set_title(\"Test Title\").set_description(\"Hello\") # Send a message with embed var msg = yield(bot.send(message, {\"embeds\": [embed]}), \"completed\") # Update the embed data embed.set_title(\"Edited Embed Title\") # Edit the msg with updated embed bot.edit(msg, {\"embeds\": [embed]}) delete(message) \u00b6 Deletes the message with same id as message. Returns: Promise<bool> The function returns true if the message is deleted, otherwise it returns the HTTP error code. Note The bot should have MANAGE_MESSAGES permission inorder to delete messages of other users. Type Parameter Description Message message The message to be deleted Examples \u00b6 Delete a message sent by the bot # Send a new message # Note: The yield is to ensure that the message is sent var msg = yield(bot.send(message, \"This message will be delete\"), \"completed\") # Delete the sent message var res = yield(bot.delete(msg), \"completed\") Delete a message sent by a user # In the message_create signal, # The bot must have valid permissions to delete a message var res = yield(bot.delete(message), \"completed\") reply(message, content, options?) \u00b6 Replies to a message Returns: Promise<Message> Type Parameter Description Message message The message to reply to String | Dictionary content Either the new message content, or new message options Dictionary options Additional message options Note The content and options are same as DiscordBot.send() start_thread(message, name, duration?) \u00b6 Creates a new thread with name as name , archive duration as duration and with the starter message as message . It returns the information of the new thread. Returns: Promise<Dictionary> Type Parameter Description Message message The message to reply to String name Name of the thread int duration Archive duration Examples \u00b6 Start a new thread with the name as discord.gd bot.start_thread(message, \"discord.gd\") get_guild_icon(guild_id, size?) \u00b6 Returns the guild icon of the guild. Returns: Promise<PoolByteArray> Type Parameter Defaults Description String guild_id - The id of the guild int size 256 The size of the guild icon image. One of 16, 32, 64, 128, 256, 512, 1024, 2048, 4096 Note To get the guild_icon as an Image or ImageTexture use Helpers.to_png_image() and Helpers.to_image_texture() Examples \u00b6 Get the guild icon as an Image # The yield is to ensure that the guild icon is fetched var bytes = yield(bot.get_guild_icon(\"330264450148073474\", 512), \"completed\") var image: Image = Helpers.to_png_image(bytes) Get the guild icon as an ImageTexture # The yield is to ensure that the guild icon is fetched var bytes = yield(bot.get_guild_icon(\"330264450148073474\", 512), \"completed\") var image: Image = Helpers.to_png_image(bytes) var texture: ImageTexture = Helpers.to_image_texture(image) set_presence(options) \u00b6 Sets the presence of the bot Returns: void options { status: String, status of the presence (https://discord.com/developers/docs/topics/gateway#update-presence-status-types), afk: bool, whether or not the client is afk, activity: { (https://discord.com/developers/docs/topics/gateway#activity-object) type: String, type of the presence, name: String, name of the presence, url: String, url of the presence, created_at: int, unix timestamp (in milliseconds) of when activity was added to user's session } } Examples \u00b6 Set the presence of the bot to \"Playing Godot Engine\" # In the bot_ready method, bot.set_presence({ \"status\": \"online\", \"afk\": false, \"activity\": { \"type\": \"game\", \"name\": \"Godot Engine\", } }) permissions_in(channel_id) \u00b6 Returns the permissions the bot has in a specific channel after applying channel overwrites Returns: Permissions Type Parameter Description String channel_id The id of the channel Examples \u00b6 Check if the bot has the SEND_MESSAGES pemissions before sending a message var perms = bot.permissions_in(message.channel_id) if not perms.has(\"SEND_MESSAGES\"): return bot.send(message, \"I can send messages :)\") permissions_for(user_id, channel_id) \u00b6 Returns the permissions for a specific user in a specific channel Returns: Permissions Note This currently only works for the Bot, since loading the guild users requires the GUILD_MEMBERS priviledged intent. Type Parameter Description String user_id The id of the user String channel_id The id of the channel get_guild_member(guild_id, member_id) \u00b6 Fetches a specific guild member's data Returns: Promise<Dictionary> Type Parameter Description String guild_id The id of the guild the member is in String member_id The id of the member Examples \u00b6 Get the guild member data of the user who sent the message var member_id = message.author.id var member = yield(bot.get_guild_member(message.guild_id, member_id), \"completed\") print(member) add_member_role(guild_id, member_id, role_id) \u00b6 Adds the role to the member Returns: int Returns the HTTP response code (204 is success) Note This requires the MANAGE_ROLES permission Type Parameter Description String guild_id The id of the guild the member is in String member_id The id of the member String role_id The id of the role to add Examples \u00b6 Add the role with id 374446838406709259 to the user who sent the message var member_id = message.author.id var res = yield(bot.add_member_role(message.guild_id, member_id, \"374446838406709259\"), \"completed\") print(res) # Prints the HTTP response code (204 is success) remove_member_role(guild_id, member_id, role_id) \u00b6 Removes the role from the member Returns: int Returns the HTTP response code (204 is success) Note This requires the MANAGE_ROLES permission Type Parameter Description String guild_id The id of the guild the member is in String member_id The id of the member String role_id The id of the role to remove Examples \u00b6 Remove the role with id 374446838406709259 from the user who sent the message var member_id = message.author.id var res = yield(bot.remove_member_role(message.guild_id, member_id, \"374446838406709259\"), \"completed\") print(res) # Prints the HTTP response code (204 is success) get_guild_emojis(guild_id) \u00b6 Returns an array of all the custom emojis of the guild Returns: Promise<Array> Type Parameter Description String guild_id The id of the guild Examples \u00b6 Get the custom emojis of the guild in which the message was sent var emojis = yield(bot.get_guild_emojis(message.guild_id), \"completed\") print(emojis) create_dm_channel(recipient_id) \u00b6 Returns the channel data of the DM channel between the bot and the recipient Returns: Promise<Dictionary> Type Parameter Description String recipient_id The id of the recipient user Examples \u00b6 Send the user with id \"32123387577696256\" a DM var dm_channel = yield(bot.create_dm_channel(\"321233875776962560\"), \"completed\") bot.send(dm_channel.id, \"Hey this is a dm\") create_reaction(message, custom_emoji) \u00b6 Creates a emoji reaction for the message. Returns: int Returns the http response code (204 is success). Note Only CUSTOM EMOJIS are supported since Godot can't render unicode emojis. Pass only the Id of the custom emoji for custom_emoji parameter. Note This requires the READ_MESSAGE_HISTORY permission. Additionally, if nobody else has reacted to the message using this emoji, this endpoint requires the ADD_REACTIONS permission to be present on the current user. Type Parameter Description Variant message The message on which to react String custom_emoji The custom id of the emoji Examples \u00b6 React with an animated parrot bot.create_reaction(message, \"565171769187500032\") React with an animated parrot and a white checkmark in order yield(bot.create_reaction(message, \"565171769187500032\"), \"completed\") # animated parrot yield(bot.create_reaction(message, \"556051807504433152\"), \"completed\") # white checkmark React without using the entire Message object var message_object = { id = \"message id here\", channel_id = \"channel id here\" } yield(bot.create_reaction(message_object, \"565171769187500032\"), \"completed\") delete_reaction(message, custom_emoji, userid?) \u00b6 Deletes the bot's or a user's reaction of an emoji. Returns: Promise<int> Returns the http response code (204 is success). Note This requires the MANAGE_MESSAGES permission Note Only CUSTOM emojis are supported since Godot can't render unicode emojis. Pass only the Id of the custom emoji as custom_emoji . Type Parameter Description Variant message The message on which to react String custom_emoji The custom id of the emoji String user_id The id of the user whose reaction to delete. If not provided, the bot's reaction will be deleted. Examples \u00b6 Delete the bot's reaction of an animated parrot # First react to the message yield(bot.create_reaction(message, \"565171769187500032\"), \"completed\") # Then delete that reaction yield(bot.delete_reaction(message, \"565171769187500032\"), \"completed\") Delete the bot's reaction of an animated parrot and a white checkmark in order # First react to the message yield(bot.create_reaction(message, \"565171769187500032\"), \"completed\") # animated parrot yield(bot.create_reaction(message, \"556051807504433152\"), \"completed\") # white checkmark # Then delete those reactions yield(bot.delete_reaction(message, \"565171769187500032\"), \"completed\") yield(bot.delete_reaction(message, \"556051807504433152\"), \"completed\") Delete the reaction of the user # First react to the message with an animated parrot yield(bot.create_reaction(message, \"565171769187500032\"), \"completed\") # Wait for some time so the user can also react with the same emoji yield(get_tree().create_timer(2), \"timeout\") # Then delete the user's reaction yield(bot.delete_reaction(message, \"565171769187500032\", message.author.id), \"completed\") Delete the reaction of the user as soon as it was reacted to # This method is connected to the DiscordBot.message_reaction_add signal func _on_bot_message_reaction_add(bot: DiscordBot, data: Dictionary): # Make sure the emoji was a CUSTOM EMOJI if !data.emoji.id: return # Make sure it's not the bot's reaction if data.member.user.id == bot.user.id: return # Delete the user's reaction to the CUSTOM EMOJI bot.delete_reaction(data, data.emoji.id, data.member.user.id) delete_reactions(message, custom_emoji) \u00b6 Deletes all reactions of the emoji on the message. Returns: Promise<int> Returns the http response code (204 is success). Note Only CUSTOM emojis are supported since Godot can't render unicode emojis. Pass only the Id of the custom emoji as the custom_emoji . Note This requires the MANAGE_MESSAGES permission Type Parameter Description Variant message The message from which to delete reactions String custom_emoji The custom id of the emoji to delete Examples \u00b6 Delete all reactions on the animated parrot emoji the mesasge # First react to the message with the animated parrot yield(bot.create_reaction(message, \"565171769187500032\"), \"completed\") # Wait for some time so the user can also react with the same emoji yield(get_tree().create_timer(2), \"timeout\") # Then delete all reactions to the animated parrot emoji yield(bot.delete_reactions(message, \"565171769187500032\"), \"completed\") get_reactions(message, custom_emoji) \u00b6 Returns a list of users that reacted with this emoji. Returns: Promise<Array> Note Only CUSTOM emojis are supported since Godot can't render unicode emojis. Pass only the Id of the custom emoji as custom_emoji . Type Parameter Description Variant message The message the emoji is present String custom_emoji The custom id of the emoji Examples \u00b6 Get the list of users who reacted to the animated parrot emoji var user_reacted = yield(bot.get_reactions(message, \"565171769187500032\"), \"completed\") print(user_reacted) # If you want to convert the data to a User, use the following: for userdata in user_reacted: var user: User = User.new(bot, userdata) print(user) register_command(command, guild_id?) \u00b6 Register the command as a global or guild level command. Returns: Promise< ApplicationCommand > Note While developing commands it's better to use guild level commands since they update instantly while global commands take upto 1hr to update. See Discord registering a command docs Type Parameter Description ApplicationCommand command The application command to register String guild_id The id of the guild to register the command. If not specified it will register globally Examples \u00b6 Register a global command var cmd1 = ApplicationCommand.new().set_name(\"ping\").set_description(\"Check my latency\") bot.register_command(cmd1) Register command for a specific guild var cmd1 = ApplicationCommand.new().set_name(\"ping\").set_description(\"Check my latency\") # Register the command for the guild with id \"330264450148073474\" bot.register_command(cmd1, \"330264450148073474\") Register a global command with options (Specific example) \"\"\" This results in a single command \"market\" which can be scoped to multiple resources \"fruits\" or \"vegetables\" which can be further scoped to multiple actions \"buy\" or \"sell\". The action buy vegetable can further be scoped to a fixed set of values \"carrot\", \"cabbage\" or \"potato\" \"\"\" var cmd1 = ApplicationCommand.new()\\ .set_name(\"market\") .set_description(\"Buy or sell items from the market\") # Add a sub command group \"fruits\" to the command # which has two sub commands \"buy\" and \"sell\" cmd1.add_option( ApplicationCommand.sub_command_group_option(\"fruits\", \"Buy or sell some fruits\", { \"options\": [ ApplicationCommand.sub_command_option(\"buy\", \"Buy a fruit\"), ApplicationCommand.sub_command_option(\"sell\", \"Sell a fruit\"), ] }) ) # Add a sub command group \"vegetables\" to the command # which has two sub commands \"buy\" and \"sell\" # The buy sub command is further limited to \"carrot\", \"cabbage\" and \"potato\" cmd1.add_option( ApplicationCommand.sub_command_group_option(\"vegetables\", \"Buy or sell some vegetables\", { \"options\": [ ApplicationCommand.sub_command_option(\"buy\", \"Buy a vegetable\", { \"options\": [ ApplicationCommand.string_option(\"vegetable\", \"The vegetable to buy\", { \"required\": true, \"choices\": [ ApplicationCommand.choice(\"Buy a carrot\", \"carrot\"), ApplicationCommand.choice(\"Buy a cabbage\", \"cabbage\"), ApplicationCommand.choice(\"Buy a potato\", \"potato\"), ] }) ] }), ApplicationCommand.sub_command_option(\"sell\", \"Sell a vegetable\") ] }) ) bot.register_command(cmd1) register_commands(commands, guild_id?) \u00b6 Bulk register multiple commands as a global or guild level commands. Returns: Promise<Array< ApplicationCommand >> Note This will overwrite all types of application commands: slash, user and message Application Commands Type Parameter Description Array commands An array of ApplicationCommand to register String guild_id The id of the guild to register the commands. If not specified it will register globally Examples \u00b6 Register three commands globally at once var cmd1 = ApplicationCommand.new().set_name(\"ping\").set_description(\"Check my latency\") var cmd2 = ApplicationCommand.new().set_name(\"help\").set_description(\"Shows some helpful information\") var cmd3 = ApplicationCommand.new().set_name(\"joke\").set_description(\"Tells a joke\") bot.register_commands([cmd1, cmd2, cmd3]) Register three commands for a guild at once var cmd1 = ApplicationCommand.new().set_name(\"ping\").set_description(\"Check my latency\") var cmd2 = ApplicationCommand.new().set_name(\"help\").set_description(\"Shows some helpful information\") var cmd3 = ApplicationCommand.new().set_name(\"joke\").set_description(\"Tells a joke\") # Register the commands for the guild with id \"330264450148073474\" bot.register_commands([cmd1, cmd2, cmd3], \"330264450148073474\") delete_command(command_id, guild_id?) \u00b6 Delete a global or guild level command. Returns: Promise<int> Returns the HTTP response code (204 is success). Type Parameter Description String command_id The id of command to delete String guild_id The id of the guild to delete the command from. If not specified it will delete the command globally Examples \u00b6 Delete a global command # Delete command with id \"123456789\" bot.delete_command(\"123456789\") delete_commands(guild_id?) \u00b6 Deletes all global or guild level commands. Returns: Promise<int> Returns the HTTP response code (204 is success). Type Parameter Description String guild_id The id of the guild to delete all commands from. If not specified it will delete all commands globally Examples \u00b6 Delete all global commands bot.delete_commands() Delete all commands for a specific guild # Delete all commands for the guild with id \"330264450148073474\" bot.delete_commands(\"330264450148073474\") get_command(command_id, guild_id?) \u00b6 Fetch a global or guild level command. Returns: Promise< ApplicationCommand > Type Parameter Description String command_id The id of the command to fetch String guild_id The id of the guild to fetch from. If not specified it will fetch from global commands get_commands(guild_id?) \u00b6 Fetch all global or guild level commands. Returns: Promise<Array< ApplicationCommand >> Type Parameter Description String guild_id The id of the guild to fetch from. If not specified it will fetch all global commands","title":"DiscordBot"},{"location":"classes/discordbot/#discordbot","text":"Extends: HTTPRequest The main Node which interacts with the Discord API.","title":"DiscordBot"},{"location":"classes/discordbot/#description","text":"A Node with the ability to communicate with the Discord websockets and REST API. Uses HTTPRequest internally. Uses signals to communicate websocket events from Discord to Godot.","title":"Description"},{"location":"classes/discordbot/#properties","text":"Type Name Defaults Description String TOKEN \"\" The token of the Discord Bot from Discord Developers bool VERBOSE false If true, prints additional debug messages int INTENTS 513 Gateway Intents User user null The bot's user account Dictionary application {} Partial bot's application Dictionary guilds {} Guilds the bot is in mapped by their ids Dictionary channels {} Text channels and DM channels the bot can access mapped by their ids","title":"Properties"},{"location":"classes/discordbot/#methods","text":"Returns Definition int add_member_role(guild_id: String, member_id: String, role_id: String) Dictionary create_dm_channel(recipient_id: String) int create_reaction(message, custom_emoji: String) Variant delete(message: Message) int delete_reaction(message, custom_emoji: String, userid?: String) int delete_reactions(message, custom_emoji: String) Message edit(message: Message, content, options?: Dictionary) Array get_guild_emojis(guild_id: String) PoolByteArray get_guild_icon(guild_id: String, size?: int) Dictionary get_guild_member(guild_id: String, member_id: String) Array get_reactions(message, custom_emoji: String) void login() Permissions permissions_for(user_id: String, channel_id: String) Permissions permissions_in(channel_id: String) int remove_member_role(guild_id: String, member_id: String, role_id: String) Message reply(message: Message, content, options?: Dictionary) Message send(message_or_channelid: Variant, content, options?: Dictionary) void set_presence(options: Dictionary) Dictionary start_thread(message: Message, name: String, duration?: int) ApplicationCommand register_command(command: [ApplicationCommand](applicationcommand.md \"ApplicationCommand\"), guild_id?: String) Array register_commands(commands: Array, guild_id?: String) int delete_command(command_id: String, guild_id?: String) int delete_commands(guild_id?: String) ApplicationCommand get_command(command_id: String, guild_id?: String) Array get_commands(guild_id?: String)","title":"Methods"},{"location":"classes/discordbot/#signals","text":"See Discord Gateway Intents bot_ready(bot: DiscordBot) Emitted when the bot is logged in to Discord. bot : The Discord bot itself message_create(bot: DiscordBot, message: Message , channel: Dictionary) Emitted when the bot receives a new message. bot : The Discord bot itself message : The message that was received channel : The channel in which the message was received message_delete(bot: DiscordBot, message: Dictionary) Emitted when any message was deleted. bot : The Discord bot itself message : The message that was deleted message_reaction_add(bot: DiscordBot, data: Dictionary) Emitted when a user reacts to a message. bot : The Discord bot itself data : Data emitted with the event (See Event Fields ) message_reaction_remove(bot: DiscordBot, data: Dictionary) Emitted when a user removes a reaction from a message. bot : The Discord bot itself data : Data emitted with the event (See Event Fields ) message_reaction_remove_all(bot: DiscordBot, data: Dictionary) Emitted when a user explicitly removes all reactions from a message. bot : The Discord bot itself data : Data emitted with the event (See Event Fields ) message_reaction_remove_emoji(bot: DiscordBot, data: Dictionary) Emitted when a bot removes all instances of a given emoji from the reactions of a message. bot : The Discord bot itself data : Data emitted with the event (See Event Fields ) guild_create(bot: DiscordBot, guild: Dictionary) Emitted when the bot joins a new guild bot : The Discord bot itself guild : The guild that was just joined guild_update(bot: DiscordBot, guild: Dictionary) Emitted when the guild is updated bot : The Discord bot itself guild : Data of the guild that was updated guild_delete(bot: DiscordBot, guild_id: String) Emitted when the bot leaves a guild bot : The Discord bot itself guild_id : The id of the guild that the bot left interaction_create(bot: DiscordBot, interaction: DiscordInteraction ) Emitted when a new interaction is created bot : The Discord bot itself interaction : The interaction which was created","title":"Signals"},{"location":"classes/discordbot/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"classes/discordbot/#login-void","text":"Connects the bot to the Discord websocket gateway. Note If you want to set DiscordBot.INTENTS to a custom value, set it before calling DiscordBot.login() Note The DiscordBot.TOKEN must be set prior to calling DiscordBot.login()","title":"login() -&gt; void"},{"location":"classes/discordbot/#sendmessage_or_channelid-content-options","text":"Sends a message to a channel Returns: Promise<Message> Type Parameter Description Variant message_or_channelid Either the channelid or the message from which to extract the channel_id String | Dictionary content Either the message content, or a Dictionary of message options Dictionary options Additional message options options: Dictionary { embeds?: Array of Embed, files?: Array of files tts?: bool, allowed_mentions?: Dictionary (See https://discord.com/developers/docs/resources/channel#allowed-mentions-object) } Each file in files: Dictionary { data: PoolByteArray, the raw bytes of the file, name: String, the name of the file with extension, media_type: String, the MIME type of the file }","title":"send(message_or_channelid, content, options?)"},{"location":"classes/discordbot/#examples","text":"Send only a text message # This function is called when the message_create signal is emitted func _on_message_create(bot: DiscordBot, message: Message, channel: Dictionary): bot.send(message, \"hello\") # OR # bot.send(message.channel_id, \"hello\") # OR # bot.send(channel.id, \"hello\") Send only an embed # Make a new embed var embed = Embed.new().set_description(\"Hello\") # Send it bot.send(message, {\"embeds\": [embed]}) Send multiple embeds # Make two embeds var embed1 = Embed.new().set_description(\"This is embed 1\") var embed2 = Embed.new().set_description(\"This is embed 2\") # Snd them bot.send(message, {\"embeds\": [embed1, embed2]}) Send a text message and an embed # Make a new embed var embed = Embed.new().set_description(\"Hello\") # Pass is as options bot.send(message, \"hello\", {\"embeds\": [embed]}) Send only a image file # Read the image file var file = File.new() file.open(\"res://icon.png\", File.READ) # Get the raw bytes as a PoolByteArray var file_data: PoolByteArray = file.get_buffer(file.get_len()) file.close() # Make the file data object var file = { \"data\": file_data, \"name\": \"godot.png\", \"media_type\": \"image/png\" } # Send the file bot.send(message, \"Here is your file\", {\"files\": [file]}) Send multiple files #...code here to get the file_data_1 and file_data_2 as PoolByteArray var file1 = { \"data\": file_data_1, \"name\": \"file1.png\", \"media_type\": \"image/png\" } var file2 = { \"data\": file_data_2, \"name\": \"file2.png\", \"media_type\": \"image/png\" } bot.send(message, {\"files\": [file1, file2]}) Send a message as a reply to another message Note It's better to use DiscordBot.reply() to reply to messages, but if you want to use DiscordBot.send() , pass in a message_reference object to the options var embed = Embed.new().set_description(\"embeds can also be added\") bot.send(message, \"I replied to this message\", { \"embeds\": [embed], \"message_reference\": { \"message_id\": message.id } }) Send three messages in order yield(bot.send(message, \"This is message 1\"), \"completed\") yield(bot.send(message, \"This is message 2\"), \"completed\") yield(bot.send(message, \"This is message 3\"), \"completed\")","title":"Examples"},{"location":"classes/discordbot/#editmessage-content-options","text":"Edits a sent message. Returns: Promise<Message> Type Parameter Description Message message The message to be edited String | Dictionary content Either the new message content, or new message options Dictionary options Additional message options Note The content and options are same as DiscordBot.send() Note Adding a file to a message that already has files results in both files existing on the new message. To only have the new file remain, use Message.slice_attachments()","title":"edit(message, content, options?)"},{"location":"classes/discordbot/#examples_1","text":"Edit the content of a message # Send a new message # The yield is to ensure that the message is sent var msg = yield(bot.send(message, \"This is the original content\"), \"completed\") # Edit the sent message # Here the msg is passed to bot.edit() and not message, since we want to edit msg var edited_msg = yield(bot.edit(msg, \"This is the edited content\"), \"completed\") Edit the embed of a message # Make an embed var embed = Embed.set_title(\"Test Title\").set_description(\"Hello\") # Send a message with embed var msg = yield(bot.send(message, {\"embeds\": [embed]}), \"completed\") # Update the embed data embed.set_title(\"Edited Embed Title\") # Edit the msg with updated embed bot.edit(msg, {\"embeds\": [embed]})","title":"Examples"},{"location":"classes/discordbot/#deletemessage","text":"Deletes the message with same id as message. Returns: Promise<bool> The function returns true if the message is deleted, otherwise it returns the HTTP error code. Note The bot should have MANAGE_MESSAGES permission inorder to delete messages of other users. Type Parameter Description Message message The message to be deleted","title":"delete(message)"},{"location":"classes/discordbot/#examples_2","text":"Delete a message sent by the bot # Send a new message # Note: The yield is to ensure that the message is sent var msg = yield(bot.send(message, \"This message will be delete\"), \"completed\") # Delete the sent message var res = yield(bot.delete(msg), \"completed\") Delete a message sent by a user # In the message_create signal, # The bot must have valid permissions to delete a message var res = yield(bot.delete(message), \"completed\")","title":"Examples"},{"location":"classes/discordbot/#replymessage-content-options","text":"Replies to a message Returns: Promise<Message> Type Parameter Description Message message The message to reply to String | Dictionary content Either the new message content, or new message options Dictionary options Additional message options Note The content and options are same as DiscordBot.send()","title":"reply(message, content, options?)"},{"location":"classes/discordbot/#start_threadmessage-name-duration","text":"Creates a new thread with name as name , archive duration as duration and with the starter message as message . It returns the information of the new thread. Returns: Promise<Dictionary> Type Parameter Description Message message The message to reply to String name Name of the thread int duration Archive duration","title":"start_thread(message, name, duration?)"},{"location":"classes/discordbot/#examples_3","text":"Start a new thread with the name as discord.gd bot.start_thread(message, \"discord.gd\")","title":"Examples"},{"location":"classes/discordbot/#get_guild_iconguild_id-size","text":"Returns the guild icon of the guild. Returns: Promise<PoolByteArray> Type Parameter Defaults Description String guild_id - The id of the guild int size 256 The size of the guild icon image. One of 16, 32, 64, 128, 256, 512, 1024, 2048, 4096 Note To get the guild_icon as an Image or ImageTexture use Helpers.to_png_image() and Helpers.to_image_texture()","title":"get_guild_icon(guild_id, size?)"},{"location":"classes/discordbot/#examples_4","text":"Get the guild icon as an Image # The yield is to ensure that the guild icon is fetched var bytes = yield(bot.get_guild_icon(\"330264450148073474\", 512), \"completed\") var image: Image = Helpers.to_png_image(bytes) Get the guild icon as an ImageTexture # The yield is to ensure that the guild icon is fetched var bytes = yield(bot.get_guild_icon(\"330264450148073474\", 512), \"completed\") var image: Image = Helpers.to_png_image(bytes) var texture: ImageTexture = Helpers.to_image_texture(image)","title":"Examples"},{"location":"classes/discordbot/#set_presenceoptions","text":"Sets the presence of the bot Returns: void options { status: String, status of the presence (https://discord.com/developers/docs/topics/gateway#update-presence-status-types), afk: bool, whether or not the client is afk, activity: { (https://discord.com/developers/docs/topics/gateway#activity-object) type: String, type of the presence, name: String, name of the presence, url: String, url of the presence, created_at: int, unix timestamp (in milliseconds) of when activity was added to user's session } }","title":"set_presence(options)"},{"location":"classes/discordbot/#examples_5","text":"Set the presence of the bot to \"Playing Godot Engine\" # In the bot_ready method, bot.set_presence({ \"status\": \"online\", \"afk\": false, \"activity\": { \"type\": \"game\", \"name\": \"Godot Engine\", } })","title":"Examples"},{"location":"classes/discordbot/#permissions_inchannel_id","text":"Returns the permissions the bot has in a specific channel after applying channel overwrites Returns: Permissions Type Parameter Description String channel_id The id of the channel","title":"permissions_in(channel_id)"},{"location":"classes/discordbot/#examples_6","text":"Check if the bot has the SEND_MESSAGES pemissions before sending a message var perms = bot.permissions_in(message.channel_id) if not perms.has(\"SEND_MESSAGES\"): return bot.send(message, \"I can send messages :)\")","title":"Examples"},{"location":"classes/discordbot/#permissions_foruser_id-channel_id","text":"Returns the permissions for a specific user in a specific channel Returns: Permissions Note This currently only works for the Bot, since loading the guild users requires the GUILD_MEMBERS priviledged intent. Type Parameter Description String user_id The id of the user String channel_id The id of the channel","title":"permissions_for(user_id, channel_id)"},{"location":"classes/discordbot/#get_guild_memberguild_id-member_id","text":"Fetches a specific guild member's data Returns: Promise<Dictionary> Type Parameter Description String guild_id The id of the guild the member is in String member_id The id of the member","title":"get_guild_member(guild_id, member_id)"},{"location":"classes/discordbot/#examples_7","text":"Get the guild member data of the user who sent the message var member_id = message.author.id var member = yield(bot.get_guild_member(message.guild_id, member_id), \"completed\") print(member)","title":"Examples"},{"location":"classes/discordbot/#add_member_roleguild_id-member_id-role_id","text":"Adds the role to the member Returns: int Returns the HTTP response code (204 is success) Note This requires the MANAGE_ROLES permission Type Parameter Description String guild_id The id of the guild the member is in String member_id The id of the member String role_id The id of the role to add","title":"add_member_role(guild_id, member_id, role_id)"},{"location":"classes/discordbot/#examples_8","text":"Add the role with id 374446838406709259 to the user who sent the message var member_id = message.author.id var res = yield(bot.add_member_role(message.guild_id, member_id, \"374446838406709259\"), \"completed\") print(res) # Prints the HTTP response code (204 is success)","title":"Examples"},{"location":"classes/discordbot/#remove_member_roleguild_id-member_id-role_id","text":"Removes the role from the member Returns: int Returns the HTTP response code (204 is success) Note This requires the MANAGE_ROLES permission Type Parameter Description String guild_id The id of the guild the member is in String member_id The id of the member String role_id The id of the role to remove","title":"remove_member_role(guild_id, member_id, role_id)"},{"location":"classes/discordbot/#examples_9","text":"Remove the role with id 374446838406709259 from the user who sent the message var member_id = message.author.id var res = yield(bot.remove_member_role(message.guild_id, member_id, \"374446838406709259\"), \"completed\") print(res) # Prints the HTTP response code (204 is success)","title":"Examples"},{"location":"classes/discordbot/#get_guild_emojisguild_id","text":"Returns an array of all the custom emojis of the guild Returns: Promise<Array> Type Parameter Description String guild_id The id of the guild","title":"get_guild_emojis(guild_id)"},{"location":"classes/discordbot/#examples_10","text":"Get the custom emojis of the guild in which the message was sent var emojis = yield(bot.get_guild_emojis(message.guild_id), \"completed\") print(emojis)","title":"Examples"},{"location":"classes/discordbot/#create_dm_channelrecipient_id","text":"Returns the channel data of the DM channel between the bot and the recipient Returns: Promise<Dictionary> Type Parameter Description String recipient_id The id of the recipient user","title":"create_dm_channel(recipient_id)"},{"location":"classes/discordbot/#examples_11","text":"Send the user with id \"32123387577696256\" a DM var dm_channel = yield(bot.create_dm_channel(\"321233875776962560\"), \"completed\") bot.send(dm_channel.id, \"Hey this is a dm\")","title":"Examples"},{"location":"classes/discordbot/#create_reactionmessage-custom_emoji","text":"Creates a emoji reaction for the message. Returns: int Returns the http response code (204 is success). Note Only CUSTOM EMOJIS are supported since Godot can't render unicode emojis. Pass only the Id of the custom emoji for custom_emoji parameter. Note This requires the READ_MESSAGE_HISTORY permission. Additionally, if nobody else has reacted to the message using this emoji, this endpoint requires the ADD_REACTIONS permission to be present on the current user. Type Parameter Description Variant message The message on which to react String custom_emoji The custom id of the emoji","title":"create_reaction(message, custom_emoji)"},{"location":"classes/discordbot/#examples_12","text":"React with an animated parrot bot.create_reaction(message, \"565171769187500032\") React with an animated parrot and a white checkmark in order yield(bot.create_reaction(message, \"565171769187500032\"), \"completed\") # animated parrot yield(bot.create_reaction(message, \"556051807504433152\"), \"completed\") # white checkmark React without using the entire Message object var message_object = { id = \"message id here\", channel_id = \"channel id here\" } yield(bot.create_reaction(message_object, \"565171769187500032\"), \"completed\")","title":"Examples"},{"location":"classes/discordbot/#delete_reactionmessage-custom_emoji-userid","text":"Deletes the bot's or a user's reaction of an emoji. Returns: Promise<int> Returns the http response code (204 is success). Note This requires the MANAGE_MESSAGES permission Note Only CUSTOM emojis are supported since Godot can't render unicode emojis. Pass only the Id of the custom emoji as custom_emoji . Type Parameter Description Variant message The message on which to react String custom_emoji The custom id of the emoji String user_id The id of the user whose reaction to delete. If not provided, the bot's reaction will be deleted.","title":"delete_reaction(message, custom_emoji, userid?)"},{"location":"classes/discordbot/#examples_13","text":"Delete the bot's reaction of an animated parrot # First react to the message yield(bot.create_reaction(message, \"565171769187500032\"), \"completed\") # Then delete that reaction yield(bot.delete_reaction(message, \"565171769187500032\"), \"completed\") Delete the bot's reaction of an animated parrot and a white checkmark in order # First react to the message yield(bot.create_reaction(message, \"565171769187500032\"), \"completed\") # animated parrot yield(bot.create_reaction(message, \"556051807504433152\"), \"completed\") # white checkmark # Then delete those reactions yield(bot.delete_reaction(message, \"565171769187500032\"), \"completed\") yield(bot.delete_reaction(message, \"556051807504433152\"), \"completed\") Delete the reaction of the user # First react to the message with an animated parrot yield(bot.create_reaction(message, \"565171769187500032\"), \"completed\") # Wait for some time so the user can also react with the same emoji yield(get_tree().create_timer(2), \"timeout\") # Then delete the user's reaction yield(bot.delete_reaction(message, \"565171769187500032\", message.author.id), \"completed\") Delete the reaction of the user as soon as it was reacted to # This method is connected to the DiscordBot.message_reaction_add signal func _on_bot_message_reaction_add(bot: DiscordBot, data: Dictionary): # Make sure the emoji was a CUSTOM EMOJI if !data.emoji.id: return # Make sure it's not the bot's reaction if data.member.user.id == bot.user.id: return # Delete the user's reaction to the CUSTOM EMOJI bot.delete_reaction(data, data.emoji.id, data.member.user.id)","title":"Examples"},{"location":"classes/discordbot/#delete_reactionsmessage-custom_emoji","text":"Deletes all reactions of the emoji on the message. Returns: Promise<int> Returns the http response code (204 is success). Note Only CUSTOM emojis are supported since Godot can't render unicode emojis. Pass only the Id of the custom emoji as the custom_emoji . Note This requires the MANAGE_MESSAGES permission Type Parameter Description Variant message The message from which to delete reactions String custom_emoji The custom id of the emoji to delete","title":"delete_reactions(message, custom_emoji)"},{"location":"classes/discordbot/#examples_14","text":"Delete all reactions on the animated parrot emoji the mesasge # First react to the message with the animated parrot yield(bot.create_reaction(message, \"565171769187500032\"), \"completed\") # Wait for some time so the user can also react with the same emoji yield(get_tree().create_timer(2), \"timeout\") # Then delete all reactions to the animated parrot emoji yield(bot.delete_reactions(message, \"565171769187500032\"), \"completed\")","title":"Examples"},{"location":"classes/discordbot/#get_reactionsmessage-custom_emoji","text":"Returns a list of users that reacted with this emoji. Returns: Promise<Array> Note Only CUSTOM emojis are supported since Godot can't render unicode emojis. Pass only the Id of the custom emoji as custom_emoji . Type Parameter Description Variant message The message the emoji is present String custom_emoji The custom id of the emoji","title":"get_reactions(message, custom_emoji)"},{"location":"classes/discordbot/#examples_15","text":"Get the list of users who reacted to the animated parrot emoji var user_reacted = yield(bot.get_reactions(message, \"565171769187500032\"), \"completed\") print(user_reacted) # If you want to convert the data to a User, use the following: for userdata in user_reacted: var user: User = User.new(bot, userdata) print(user)","title":"Examples"},{"location":"classes/discordbot/#register_commandcommand-guild_id","text":"Register the command as a global or guild level command. Returns: Promise< ApplicationCommand > Note While developing commands it's better to use guild level commands since they update instantly while global commands take upto 1hr to update. See Discord registering a command docs Type Parameter Description ApplicationCommand command The application command to register String guild_id The id of the guild to register the command. If not specified it will register globally","title":"register_command(command, guild_id?)"},{"location":"classes/discordbot/#examples_16","text":"Register a global command var cmd1 = ApplicationCommand.new().set_name(\"ping\").set_description(\"Check my latency\") bot.register_command(cmd1) Register command for a specific guild var cmd1 = ApplicationCommand.new().set_name(\"ping\").set_description(\"Check my latency\") # Register the command for the guild with id \"330264450148073474\" bot.register_command(cmd1, \"330264450148073474\") Register a global command with options (Specific example) \"\"\" This results in a single command \"market\" which can be scoped to multiple resources \"fruits\" or \"vegetables\" which can be further scoped to multiple actions \"buy\" or \"sell\". The action buy vegetable can further be scoped to a fixed set of values \"carrot\", \"cabbage\" or \"potato\" \"\"\" var cmd1 = ApplicationCommand.new()\\ .set_name(\"market\") .set_description(\"Buy or sell items from the market\") # Add a sub command group \"fruits\" to the command # which has two sub commands \"buy\" and \"sell\" cmd1.add_option( ApplicationCommand.sub_command_group_option(\"fruits\", \"Buy or sell some fruits\", { \"options\": [ ApplicationCommand.sub_command_option(\"buy\", \"Buy a fruit\"), ApplicationCommand.sub_command_option(\"sell\", \"Sell a fruit\"), ] }) ) # Add a sub command group \"vegetables\" to the command # which has two sub commands \"buy\" and \"sell\" # The buy sub command is further limited to \"carrot\", \"cabbage\" and \"potato\" cmd1.add_option( ApplicationCommand.sub_command_group_option(\"vegetables\", \"Buy or sell some vegetables\", { \"options\": [ ApplicationCommand.sub_command_option(\"buy\", \"Buy a vegetable\", { \"options\": [ ApplicationCommand.string_option(\"vegetable\", \"The vegetable to buy\", { \"required\": true, \"choices\": [ ApplicationCommand.choice(\"Buy a carrot\", \"carrot\"), ApplicationCommand.choice(\"Buy a cabbage\", \"cabbage\"), ApplicationCommand.choice(\"Buy a potato\", \"potato\"), ] }) ] }), ApplicationCommand.sub_command_option(\"sell\", \"Sell a vegetable\") ] }) ) bot.register_command(cmd1)","title":"Examples"},{"location":"classes/discordbot/#register_commandscommands-guild_id","text":"Bulk register multiple commands as a global or guild level commands. Returns: Promise<Array< ApplicationCommand >> Note This will overwrite all types of application commands: slash, user and message Application Commands Type Parameter Description Array commands An array of ApplicationCommand to register String guild_id The id of the guild to register the commands. If not specified it will register globally","title":"register_commands(commands, guild_id?)"},{"location":"classes/discordbot/#examples_17","text":"Register three commands globally at once var cmd1 = ApplicationCommand.new().set_name(\"ping\").set_description(\"Check my latency\") var cmd2 = ApplicationCommand.new().set_name(\"help\").set_description(\"Shows some helpful information\") var cmd3 = ApplicationCommand.new().set_name(\"joke\").set_description(\"Tells a joke\") bot.register_commands([cmd1, cmd2, cmd3]) Register three commands for a guild at once var cmd1 = ApplicationCommand.new().set_name(\"ping\").set_description(\"Check my latency\") var cmd2 = ApplicationCommand.new().set_name(\"help\").set_description(\"Shows some helpful information\") var cmd3 = ApplicationCommand.new().set_name(\"joke\").set_description(\"Tells a joke\") # Register the commands for the guild with id \"330264450148073474\" bot.register_commands([cmd1, cmd2, cmd3], \"330264450148073474\")","title":"Examples"},{"location":"classes/discordbot/#delete_commandcommand_id-guild_id","text":"Delete a global or guild level command. Returns: Promise<int> Returns the HTTP response code (204 is success). Type Parameter Description String command_id The id of command to delete String guild_id The id of the guild to delete the command from. If not specified it will delete the command globally","title":"delete_command(command_id, guild_id?)"},{"location":"classes/discordbot/#examples_18","text":"Delete a global command # Delete command with id \"123456789\" bot.delete_command(\"123456789\")","title":"Examples"},{"location":"classes/discordbot/#delete_commandsguild_id","text":"Deletes all global or guild level commands. Returns: Promise<int> Returns the HTTP response code (204 is success). Type Parameter Description String guild_id The id of the guild to delete all commands from. If not specified it will delete all commands globally","title":"delete_commands(guild_id?)"},{"location":"classes/discordbot/#examples_19","text":"Delete all global commands bot.delete_commands() Delete all commands for a specific guild # Delete all commands for the guild with id \"330264450148073474\" bot.delete_commands(\"330264450148073474\")","title":"Examples"},{"location":"classes/discordbot/#get_commandcommand_id-guild_id","text":"Fetch a global or guild level command. Returns: Promise< ApplicationCommand > Type Parameter Description String command_id The id of the command to fetch String guild_id The id of the guild to fetch from. If not specified it will fetch from global commands","title":"get_command(command_id, guild_id?)"},{"location":"classes/discordbot/#get_commandsguild_id","text":"Fetch all global or guild level commands. Returns: Promise<Array< ApplicationCommand >> Type Parameter Description String guild_id The id of the guild to fetch from. If not specified it will fetch all global commands","title":"get_commands(guild_id?)"},{"location":"classes/discordinteraction/","text":"DiscordInteraction \u00b6 Extends: None Represents a Discord interaction. Description \u00b6 Provides methods for replying, updating and follow up to interactions. Properties \u00b6 Type Name Description String application_id The application's id String channel_id The id of the channel this interaction was sent in String guild_id The id of the guild this interaction was sent in String id The interaction's id Dictionary member If this interaction was sent in a guild, the member which sent it Message message For components, the message they were attached to String token The interaction's token String type The interaction's type Dictionary data Additional data of this interaction Methods \u00b6 Returns Definition Variant defer_reply(options: Dictionary) Variant defer_update(options: Dictionary) Variant delete_follow_up(message: Message) Variant delete_reply() Variant edit_follow_up(message: Message, options: Dictionary) Variant edit_reply(options: Dictionary) Message fetch_reply() Variant follow_up(options: Dictionary) bool in_guild() bool is_button() bool is_message_component() bool is_select_menu() bool is_command() bool is_autocomplete() bool respond_autocomplete(choices: Array) Variant reply(options: Dictionary) Variant update(options: Dictionary) Method Descriptions \u00b6 is_message_component() \u00b6 Indicates whether this interaction is a message component. Returns: bool is_button() \u00b6 Indicates whether this interaction is a button interaction. Returns: bool is_select_menu() \u00b6 Indicates whether this interaction is a select menu interaction. Returns: bool is_command() \u00b6 Indicates whether this interaction is an application command interaction. Returns: bool is_autocomplete() \u00b6 Indicates whether this interaction is an application command autocomplete interaction. Returns: bool respond_autocomplete(choices) \u00b6 Responds to an autocomplete interaction with suggested choices. Returns: bool Returns true if successful otherwise false . See Discord responding to autocomplete Type Parameter Description Array choices The array of choices Examples \u00b6 Always respond with two choices # In DiscordBot.interaction_create if interaction.is_autocomplete(): var data = interaction.data print(\"Autocomplete data: \", data) # In a real situation you would send different choices based on the current input of the user, # which can be found in interaction.data interaction.respond_autocomplete([ ApplicationCommand.choice(\"Name of the choice 1\", \"value1\"), ApplicationCommand.choice(\"Name of the choice 2\", \"value2\"), ]) return in_guild() \u00b6 Indicates whether this interaction is received from a guild. Returns: bool fetch_reply() \u00b6 Fetches the initial reply to this interaction. Returns: Promise reply(options) \u00b6 Creates a reply to this interaction. Returns: Variant Type Parameter Description Dictionary options The options for the new reply Note Here the options means the message options. Like embeds, components, content, files, etc. The two new keys are fetch_reply and ephemeral . If fetch_reply is true, the function will return a Promsise< Message > otherwise the function will return true . options: Dictionary { fetch_reply: bool, whether to return the new reply or not, ephemeral: bool, whether the reply should be ephemeral or not, files: Array, the files to attach to the new reply, embeds: Array, the embeds to attach to the new reply, content: String, the content of the new reply, components: Array, the components to attach to the new reply } edit_reply(options) \u00b6 Edits the initial reply to this interaction. Returns: Variant Note options is same as DiscordInteraction.reply() options. delete_reply() \u00b6 Deletes the initial reply to this interaction. Returns: void defer_reply(options) \u00b6 Defers the reply to this interaction. Returns: Variant Note options is same as DiscordInteraction.reply() options. Examples \u00b6 Defer to send an ephemeral reply later yield(interaction.defer_reply({\"ephemeral\": true}), \"completed\") update(options) \u00b6 Updates the original message of the component on which the interaction was received on. Returns: Variant Note options is same as DiscordInteraction.reply() options. Examples \u00b6 Remove the components from the message yield(interaction.update({ \"components\": [], \"content\": \"Components are removed\" }), \"completed\") follow_up(options) \u00b6 Send a follow-up message to this interaction. Returns: Variant Note options is same as DiscordInteraction.reply() options. edit_follow_up(message, options) \u00b6 Edits a follow-up message to this interaction. Returns: Variant Note options is same as DiscordInteraction.reply() options. Type Parameter Description [[Message]] message The sent follow up message to edit Dictionary options Additional options same as DiscordInteraction.reply() options delete_follow_up(message) \u00b6 Deletes a follow-up message to this interaction. Returns: Variant Type Parameter Description Message message The sent follow up message to delete Examples \u00b6 Delete a sent follow up # inside interaction_create signal # Send a follow up var msg = yield(interaction.follow_up({\"content\": \"This will be deleted soon\"}), \"completed\") # Wait 5s yield(get_tree().create_timer(5), \"timeout\") # Delete the follow up interaction.delete_follow_up(msg)","title":"DiscordInteraction"},{"location":"classes/discordinteraction/#discordinteraction","text":"Extends: None Represents a Discord interaction.","title":"DiscordInteraction"},{"location":"classes/discordinteraction/#description","text":"Provides methods for replying, updating and follow up to interactions.","title":"Description"},{"location":"classes/discordinteraction/#properties","text":"Type Name Description String application_id The application's id String channel_id The id of the channel this interaction was sent in String guild_id The id of the guild this interaction was sent in String id The interaction's id Dictionary member If this interaction was sent in a guild, the member which sent it Message message For components, the message they were attached to String token The interaction's token String type The interaction's type Dictionary data Additional data of this interaction","title":"Properties"},{"location":"classes/discordinteraction/#methods","text":"Returns Definition Variant defer_reply(options: Dictionary) Variant defer_update(options: Dictionary) Variant delete_follow_up(message: Message) Variant delete_reply() Variant edit_follow_up(message: Message, options: Dictionary) Variant edit_reply(options: Dictionary) Message fetch_reply() Variant follow_up(options: Dictionary) bool in_guild() bool is_button() bool is_message_component() bool is_select_menu() bool is_command() bool is_autocomplete() bool respond_autocomplete(choices: Array) Variant reply(options: Dictionary) Variant update(options: Dictionary)","title":"Methods"},{"location":"classes/discordinteraction/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"classes/discordinteraction/#is_message_component","text":"Indicates whether this interaction is a message component. Returns: bool","title":"is_message_component()"},{"location":"classes/discordinteraction/#is_button","text":"Indicates whether this interaction is a button interaction. Returns: bool","title":"is_button()"},{"location":"classes/discordinteraction/#is_select_menu","text":"Indicates whether this interaction is a select menu interaction. Returns: bool","title":"is_select_menu()"},{"location":"classes/discordinteraction/#is_command","text":"Indicates whether this interaction is an application command interaction. Returns: bool","title":"is_command()"},{"location":"classes/discordinteraction/#is_autocomplete","text":"Indicates whether this interaction is an application command autocomplete interaction. Returns: bool","title":"is_autocomplete()"},{"location":"classes/discordinteraction/#respond_autocompletechoices","text":"Responds to an autocomplete interaction with suggested choices. Returns: bool Returns true if successful otherwise false . See Discord responding to autocomplete Type Parameter Description Array choices The array of choices","title":"respond_autocomplete(choices)"},{"location":"classes/discordinteraction/#examples","text":"Always respond with two choices # In DiscordBot.interaction_create if interaction.is_autocomplete(): var data = interaction.data print(\"Autocomplete data: \", data) # In a real situation you would send different choices based on the current input of the user, # which can be found in interaction.data interaction.respond_autocomplete([ ApplicationCommand.choice(\"Name of the choice 1\", \"value1\"), ApplicationCommand.choice(\"Name of the choice 2\", \"value2\"), ]) return","title":"Examples"},{"location":"classes/discordinteraction/#in_guild","text":"Indicates whether this interaction is received from a guild. Returns: bool","title":"in_guild()"},{"location":"classes/discordinteraction/#fetch_reply","text":"Fetches the initial reply to this interaction. Returns: Promise","title":"fetch_reply()"},{"location":"classes/discordinteraction/#replyoptions","text":"Creates a reply to this interaction. Returns: Variant Type Parameter Description Dictionary options The options for the new reply Note Here the options means the message options. Like embeds, components, content, files, etc. The two new keys are fetch_reply and ephemeral . If fetch_reply is true, the function will return a Promsise< Message > otherwise the function will return true . options: Dictionary { fetch_reply: bool, whether to return the new reply or not, ephemeral: bool, whether the reply should be ephemeral or not, files: Array, the files to attach to the new reply, embeds: Array, the embeds to attach to the new reply, content: String, the content of the new reply, components: Array, the components to attach to the new reply }","title":"reply(options)"},{"location":"classes/discordinteraction/#edit_replyoptions","text":"Edits the initial reply to this interaction. Returns: Variant Note options is same as DiscordInteraction.reply() options.","title":"edit_reply(options)"},{"location":"classes/discordinteraction/#delete_reply","text":"Deletes the initial reply to this interaction. Returns: void","title":"delete_reply()"},{"location":"classes/discordinteraction/#defer_replyoptions","text":"Defers the reply to this interaction. Returns: Variant Note options is same as DiscordInteraction.reply() options.","title":"defer_reply(options)"},{"location":"classes/discordinteraction/#examples_1","text":"Defer to send an ephemeral reply later yield(interaction.defer_reply({\"ephemeral\": true}), \"completed\")","title":"Examples"},{"location":"classes/discordinteraction/#updateoptions","text":"Updates the original message of the component on which the interaction was received on. Returns: Variant Note options is same as DiscordInteraction.reply() options.","title":"update(options)"},{"location":"classes/discordinteraction/#examples_2","text":"Remove the components from the message yield(interaction.update({ \"components\": [], \"content\": \"Components are removed\" }), \"completed\")","title":"Examples"},{"location":"classes/discordinteraction/#follow_upoptions","text":"Send a follow-up message to this interaction. Returns: Variant Note options is same as DiscordInteraction.reply() options.","title":"follow_up(options)"},{"location":"classes/discordinteraction/#edit_follow_upmessage-options","text":"Edits a follow-up message to this interaction. Returns: Variant Note options is same as DiscordInteraction.reply() options. Type Parameter Description [[Message]] message The sent follow up message to edit Dictionary options Additional options same as DiscordInteraction.reply() options","title":"edit_follow_up(message, options)"},{"location":"classes/discordinteraction/#delete_follow_upmessage","text":"Deletes a follow-up message to this interaction. Returns: Variant Type Parameter Description Message message The sent follow up message to delete","title":"delete_follow_up(message)"},{"location":"classes/discordinteraction/#examples_3","text":"Delete a sent follow up # inside interaction_create signal # Send a follow up var msg = yield(interaction.follow_up({\"content\": \"This will be deleted soon\"}), \"completed\") # Wait 5s yield(get_tree().create_timer(5), \"timeout\") # Delete the follow up interaction.delete_follow_up(msg)","title":"Examples"},{"location":"classes/embed/","text":"Embed \u00b6 Extends: None Wrapper for an Embed on Discord Description \u00b6 Contains all the data of an embed. It also has a few chainable methods to make creating embeds easy Properties \u00b6 See Discord Embed Stucture Type Name Description String title The title of the Embed String type The type of the Embed (default is rich ) (See Discord Embed Types ) String description The description of the Embed String url The url of the Embed String timestamp The ISO8601 timestamp of the Embed (or null) int color The color code of the Embed Dictionary footer Footer information Dictionary image Image information Dictionary thumbnail Thumbnail information Dictionary video Video information Dictionary provider Provider information Dictionary author Author information Array fields The fields of the embed footer: Dictionary (See Discord Embed Footer Structure ) { text: String, text of the footer, icon_url?: String, url of footer icon, proxy_url?: String, proxied url of footer icon } image: Dictionary (See Discord Embed Image Structure ) { url?: String, source url of image, proxy_url?: String, proxied url of image, height?: int, height of image, width?: int, width of image } thumbnail: Dictionary (See Discord Embed Thumbnail Structure ) { url?: String, source url of thumbnail, proxy_url?: String, proxied url of thumbnail, height?: int, height of thumbnail, width?: int, width of thumbnail } video: Dictionary (See Discord Embed Video Structure ) { url?: String, source url of video, proxy_url?: String, proxied url of video, height?: int, height of video, width?: int, width of video } provider: Dictionary (See Discord Embed Provider Structure ) { name?: String, name of provider url?: String, url of provider, } author: Dictionary (See Discord Embed Author Structure ) { name?: String, name of author, url?: String, url of author, icon_url?: String, url of author icon, proxy_url?: String, proxied url of author icon } Each field: Dictionary (See Discord Embed Field Structure ) { name: String, name of the field, value: String, value of the field, inline?: bool, whether or not this field should display inline } Methods \u00b6 Returns Definition Embed add_field(name: String, value: String, inline?: bool) void print() Embed set_author(name: String, url?: String, icon_url?: String, proxy_icon_url?: String) Embed set_color(color: Variant) Embed set_description(description: String) Embed set_footer(text: String, icon_url?: String, proxy_icon_url?: String) Embed set_image(url: String, width?: int, height?: int, proxy_url?: String) Embed set_provider(name: String, url?: String) Embed set_thumbnail(url: String, width?: int, height?: int, proxy_url?: String) Embed set_timestamp(timestamp: String) Embed set_title(title: String) Embed set_type(type: String) Embed set_url(url: String) Embed set_video(url: String, width?: int, height?: int, proxy_url?: String) Embed slice_fields(index: int, delete_count?: int, replace_fields?: Array) Note Getters are also defined for the above functions which all return Dictionary Note All setter methods and add_fields() return the Embed itself, so chaining of methods is possible Method Descriptions \u00b6 set_title(title) \u00b6 Sets the title of the Embed Returns: Embed Type Parameter String title set_type(type) \u00b6 Sets the type of the Embed Returns: Embed Type Parameter String type set_description(description) \u00b6 Sets the description of the Embed Returns: Embed Type Parameter String description set_url(url) \u00b6 Sets the url of the Embed Returns: Embed Type Parameter String url set_timestamp() \u00b6 Sets the timestamp of the Embed to the current unix timestamp Returns: Embed Examples \u00b6 Set the timestamp of an embed to the current ISO8601 timestamp var embed = Embed.new().set_timestamp() set_color(color) \u00b6 Sets the color of the Embed Returns: Embed Type Parameter Description Array | String | int color Supports RGB array, HEX string or decimal representation Examples \u00b6 An rgb color var embed = Embed().new().set_color([255, 0, 255]) A hex color var embed = Embed().new().set_color(\"#ff55ff\") A decimal color var embed = Embed().new().set_color(16711935) set_footer(text, icon_url?, proxy_icon_url?) \u00b6 Sets the footer of the Embed Returns: Embed Type Parameter Description String text The text of the footer String icon_url The url of footer icon String proxy_icon_url The proxied url of footer icon set_image(url, width?, height?, proxy_url?) \u00b6 Sets the image of the Embed Returns: Embed Type Parameter Description String url The url of embed image int width The width of embed image int height The height url of embed image String proxy_url The proxied url of embed image set_thumbnail(url, width?, height?, proxy_url?) \u00b6 Sets the thumbnail of the Embed Returns: Embed Type Parameter Description String url The url of embed thumbnail int width The width of embed thumbnail int height The height url of embed thumbnail String proxy_url The proxied url of embed thumbnail set_video(url, width?, height?, proxy_url?) \u00b6 Sets the video of the Embed Returns: Embed Type Parameter Description String url The url of embed video int width The width of embed video int height The height url of embed video String proxy_url The proxied url of embed video set_provider(name, url?) \u00b6 Sets the provider of the Embed Returns: Embed Type Parameter Description String name The name of embed provider String url The url of embed provider set_author(name, url?, icon_url?, proxy_icon_url?) \u00b6 Sets the author of the Embed Returns: Embed Type Parameter Description String name The name of embed author String url The url of embed author String icon_url The url of author icon String proxy_icon_url The proxied url of author icon Examples \u00b6 Set the author of an Embed var embed = Embed.new().set_author(\"Delano Lourenco\", \"https://url_to_image_file.png\") add_field(name, value, inline?) \u00b6 Sets the field of the Embed Returns: Embed Note An Embed can have a max of 25 fields Type Parameter Description String name The name of the embed field String value The value of the embed field bool inline Whether or not this field should display inline Examples \u00b6 Add multiple fields to an Embed # Make the embed var embed = Embed.new() embed.add_field(\"field 1\", \"text 1\") embed.add_field(\"field 2\", \"text 2\") embed.add_field(\"field 3\", \"inline text 1\", true) # inline embed.add_field(\"field 4\", \"inline text 1\", true) # inline # Send the embed bot.send(message, {\"embeds\": [embed]}) slice_fields(index, delete_count?, replace_fields?) \u00b6 Removes, replaces, and inserts fields in the Embed. Returns: Embed Type Parameter Defaults Description int index Required The index of the first field in the Embeds.fields to be removed int delete_count 1 The number of fields to remove Array replace_fields [] The replacing fields, an array of Dictionary(field) Dictionary(field): Dictionary { name: String, name of the field, value: String, value of the field, inline?: bool, whether or not this field should display inline } print() \u00b6 Prints the Embed Returns: void Note To print an Embed, use Embed.print() instead of print(Embed)","title":"Embed"},{"location":"classes/embed/#embed","text":"Extends: None Wrapper for an Embed on Discord","title":"Embed"},{"location":"classes/embed/#description","text":"Contains all the data of an embed. It also has a few chainable methods to make creating embeds easy","title":"Description"},{"location":"classes/embed/#properties","text":"See Discord Embed Stucture Type Name Description String title The title of the Embed String type The type of the Embed (default is rich ) (See Discord Embed Types ) String description The description of the Embed String url The url of the Embed String timestamp The ISO8601 timestamp of the Embed (or null) int color The color code of the Embed Dictionary footer Footer information Dictionary image Image information Dictionary thumbnail Thumbnail information Dictionary video Video information Dictionary provider Provider information Dictionary author Author information Array fields The fields of the embed footer: Dictionary (See Discord Embed Footer Structure ) { text: String, text of the footer, icon_url?: String, url of footer icon, proxy_url?: String, proxied url of footer icon } image: Dictionary (See Discord Embed Image Structure ) { url?: String, source url of image, proxy_url?: String, proxied url of image, height?: int, height of image, width?: int, width of image } thumbnail: Dictionary (See Discord Embed Thumbnail Structure ) { url?: String, source url of thumbnail, proxy_url?: String, proxied url of thumbnail, height?: int, height of thumbnail, width?: int, width of thumbnail } video: Dictionary (See Discord Embed Video Structure ) { url?: String, source url of video, proxy_url?: String, proxied url of video, height?: int, height of video, width?: int, width of video } provider: Dictionary (See Discord Embed Provider Structure ) { name?: String, name of provider url?: String, url of provider, } author: Dictionary (See Discord Embed Author Structure ) { name?: String, name of author, url?: String, url of author, icon_url?: String, url of author icon, proxy_url?: String, proxied url of author icon } Each field: Dictionary (See Discord Embed Field Structure ) { name: String, name of the field, value: String, value of the field, inline?: bool, whether or not this field should display inline }","title":"Properties"},{"location":"classes/embed/#methods","text":"Returns Definition Embed add_field(name: String, value: String, inline?: bool) void print() Embed set_author(name: String, url?: String, icon_url?: String, proxy_icon_url?: String) Embed set_color(color: Variant) Embed set_description(description: String) Embed set_footer(text: String, icon_url?: String, proxy_icon_url?: String) Embed set_image(url: String, width?: int, height?: int, proxy_url?: String) Embed set_provider(name: String, url?: String) Embed set_thumbnail(url: String, width?: int, height?: int, proxy_url?: String) Embed set_timestamp(timestamp: String) Embed set_title(title: String) Embed set_type(type: String) Embed set_url(url: String) Embed set_video(url: String, width?: int, height?: int, proxy_url?: String) Embed slice_fields(index: int, delete_count?: int, replace_fields?: Array) Note Getters are also defined for the above functions which all return Dictionary Note All setter methods and add_fields() return the Embed itself, so chaining of methods is possible","title":"Methods"},{"location":"classes/embed/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"classes/embed/#set_titletitle","text":"Sets the title of the Embed Returns: Embed Type Parameter String title","title":"set_title(title)"},{"location":"classes/embed/#set_typetype","text":"Sets the type of the Embed Returns: Embed Type Parameter String type","title":"set_type(type)"},{"location":"classes/embed/#set_descriptiondescription","text":"Sets the description of the Embed Returns: Embed Type Parameter String description","title":"set_description(description)"},{"location":"classes/embed/#set_urlurl","text":"Sets the url of the Embed Returns: Embed Type Parameter String url","title":"set_url(url)"},{"location":"classes/embed/#set_timestamp","text":"Sets the timestamp of the Embed to the current unix timestamp Returns: Embed","title":"set_timestamp()"},{"location":"classes/embed/#examples","text":"Set the timestamp of an embed to the current ISO8601 timestamp var embed = Embed.new().set_timestamp()","title":"Examples"},{"location":"classes/embed/#set_colorcolor","text":"Sets the color of the Embed Returns: Embed Type Parameter Description Array | String | int color Supports RGB array, HEX string or decimal representation","title":"set_color(color)"},{"location":"classes/embed/#examples_1","text":"An rgb color var embed = Embed().new().set_color([255, 0, 255]) A hex color var embed = Embed().new().set_color(\"#ff55ff\") A decimal color var embed = Embed().new().set_color(16711935)","title":"Examples"},{"location":"classes/embed/#set_footertext-icon_url-proxy_icon_url","text":"Sets the footer of the Embed Returns: Embed Type Parameter Description String text The text of the footer String icon_url The url of footer icon String proxy_icon_url The proxied url of footer icon","title":"set_footer(text, icon_url?, proxy_icon_url?)"},{"location":"classes/embed/#set_imageurl-width-height-proxy_url","text":"Sets the image of the Embed Returns: Embed Type Parameter Description String url The url of embed image int width The width of embed image int height The height url of embed image String proxy_url The proxied url of embed image","title":"set_image(url, width?, height?, proxy_url?)"},{"location":"classes/embed/#set_thumbnailurl-width-height-proxy_url","text":"Sets the thumbnail of the Embed Returns: Embed Type Parameter Description String url The url of embed thumbnail int width The width of embed thumbnail int height The height url of embed thumbnail String proxy_url The proxied url of embed thumbnail","title":"set_thumbnail(url, width?, height?, proxy_url?)"},{"location":"classes/embed/#set_videourl-width-height-proxy_url","text":"Sets the video of the Embed Returns: Embed Type Parameter Description String url The url of embed video int width The width of embed video int height The height url of embed video String proxy_url The proxied url of embed video","title":"set_video(url, width?, height?, proxy_url?)"},{"location":"classes/embed/#set_providername-url","text":"Sets the provider of the Embed Returns: Embed Type Parameter Description String name The name of embed provider String url The url of embed provider","title":"set_provider(name, url?)"},{"location":"classes/embed/#set_authorname-url-icon_url-proxy_icon_url","text":"Sets the author of the Embed Returns: Embed Type Parameter Description String name The name of embed author String url The url of embed author String icon_url The url of author icon String proxy_icon_url The proxied url of author icon","title":"set_author(name, url?, icon_url?, proxy_icon_url?)"},{"location":"classes/embed/#examples_2","text":"Set the author of an Embed var embed = Embed.new().set_author(\"Delano Lourenco\", \"https://url_to_image_file.png\")","title":"Examples"},{"location":"classes/embed/#add_fieldname-value-inline","text":"Sets the field of the Embed Returns: Embed Note An Embed can have a max of 25 fields Type Parameter Description String name The name of the embed field String value The value of the embed field bool inline Whether or not this field should display inline","title":"add_field(name, value, inline?)"},{"location":"classes/embed/#examples_3","text":"Add multiple fields to an Embed # Make the embed var embed = Embed.new() embed.add_field(\"field 1\", \"text 1\") embed.add_field(\"field 2\", \"text 2\") embed.add_field(\"field 3\", \"inline text 1\", true) # inline embed.add_field(\"field 4\", \"inline text 1\", true) # inline # Send the embed bot.send(message, {\"embeds\": [embed]})","title":"Examples"},{"location":"classes/embed/#slice_fieldsindex-delete_count-replace_fields","text":"Removes, replaces, and inserts fields in the Embed. Returns: Embed Type Parameter Defaults Description int index Required The index of the first field in the Embeds.fields to be removed int delete_count 1 The number of fields to remove Array replace_fields [] The replacing fields, an array of Dictionary(field) Dictionary(field): Dictionary { name: String, name of the field, value: String, value of the field, inline?: bool, whether or not this field should display inline }","title":"slice_fields(index, delete_count?, replace_fields?)"},{"location":"classes/embed/#print","text":"Prints the Embed Returns: void Note To print an Embed, use Embed.print() instead of print(Embed)","title":"print()"},{"location":"classes/helpers/","text":"Helpers \u00b6 Extends: None General purpose functions Description \u00b6 General purpose functions which Discord.gd makes use of. Static Methods \u00b6 Returns Definition bool is_num(value: Variant) bool is_str(value: Variant) bool is_valid_str(value: Variant) String make_iso_string(datetime?: Dictionary) void print_dict(to_print: Dictionary) void save_dict(to_save: Dictionary) Image to_png_image(png_bytes: PoolByteArray) ImageTexture to_image_texture(image: Image) Method Descriptions \u00b6 is_num(value) \u00b6 Whether a given variable is an integer or a float. Returns: bool Type Parameter Variant value Examples \u00b6 print(Helpers.is_num(15)) # Prints true print(Helpers.is_num(15.5)) # Prints true print(Helpers.is_num(\"15\")) # Prints false is_str(value) \u00b6 Returns true if a given variable is a String Returns: bool Type Parameter Variant value Examples \u00b6 print(Helpers.is_num(15)) # Prints false print(Helpers.is_num(\"\")) # Prints true print(Helpers.is_num(\"15\")) # Prints true is_valid_str(value) \u00b6 Returns true if a given variable is a String and has length of 1 or more characters Returns: bool Type Parameter Variant value Examples \u00b6 print(Helpers.is_valid_str(\"15\")) # Prints true print(Helpers.is_valid_str(\"\")) # Prints false make_iso_string(datetime?) \u00b6 Returns a ISO8601 timestamp from the current or specified datetime Dictionary Returns: String Type Parameter Default Description String datetime OS.get_datetime(true) A Dictionary with keys: year, month, day, weekday, dst (Daylight Savings Time), hour, minute, second. (UTC time zone) print_dict(to_print) \u00b6 Pretty prints a Dictionary Returns: void Note This is the same as doing print(JSON.print(to_print, \"\\t\")) Type Parameter Dictionary to_print save_dict(to_save, filename?) \u00b6 Saves a Dictionary as a JSON file to the user:// directory. This helps viewing large dictionaries which result in outpul overflow when printing. Returns: void Note user:// directory is located at %appdata%/Godot/app_userdata/PROJECT_NAME_HERE/ Type Parameter Default Description Dictionary to_save - The dictionary to be saved String filename saved_dict The name of the JSON file to_png_image(png_bytes) \u00b6 Converts the raw bytes of a PNG image to a Image Returns: Image Type Parameter PoolByteArray png_bytes to_image_texture(image) \u00b6 Converts an Image to a ImageTexture Returns: ImageTexture Type Parameter Image image","title":"Helpers"},{"location":"classes/helpers/#helpers","text":"Extends: None General purpose functions","title":"Helpers"},{"location":"classes/helpers/#description","text":"General purpose functions which Discord.gd makes use of.","title":"Description"},{"location":"classes/helpers/#static-methods","text":"Returns Definition bool is_num(value: Variant) bool is_str(value: Variant) bool is_valid_str(value: Variant) String make_iso_string(datetime?: Dictionary) void print_dict(to_print: Dictionary) void save_dict(to_save: Dictionary) Image to_png_image(png_bytes: PoolByteArray) ImageTexture to_image_texture(image: Image)","title":"Static Methods"},{"location":"classes/helpers/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"classes/helpers/#is_numvalue","text":"Whether a given variable is an integer or a float. Returns: bool Type Parameter Variant value","title":"is_num(value)"},{"location":"classes/helpers/#examples","text":"print(Helpers.is_num(15)) # Prints true print(Helpers.is_num(15.5)) # Prints true print(Helpers.is_num(\"15\")) # Prints false","title":"Examples"},{"location":"classes/helpers/#is_strvalue","text":"Returns true if a given variable is a String Returns: bool Type Parameter Variant value","title":"is_str(value)"},{"location":"classes/helpers/#examples_1","text":"print(Helpers.is_num(15)) # Prints false print(Helpers.is_num(\"\")) # Prints true print(Helpers.is_num(\"15\")) # Prints true","title":"Examples"},{"location":"classes/helpers/#is_valid_strvalue","text":"Returns true if a given variable is a String and has length of 1 or more characters Returns: bool Type Parameter Variant value","title":"is_valid_str(value)"},{"location":"classes/helpers/#examples_2","text":"print(Helpers.is_valid_str(\"15\")) # Prints true print(Helpers.is_valid_str(\"\")) # Prints false","title":"Examples"},{"location":"classes/helpers/#make_iso_stringdatetime","text":"Returns a ISO8601 timestamp from the current or specified datetime Dictionary Returns: String Type Parameter Default Description String datetime OS.get_datetime(true) A Dictionary with keys: year, month, day, weekday, dst (Daylight Savings Time), hour, minute, second. (UTC time zone)","title":"make_iso_string(datetime?)"},{"location":"classes/helpers/#print_dictto_print","text":"Pretty prints a Dictionary Returns: void Note This is the same as doing print(JSON.print(to_print, \"\\t\")) Type Parameter Dictionary to_print","title":"print_dict(to_print)"},{"location":"classes/helpers/#save_dictto_save-filename","text":"Saves a Dictionary as a JSON file to the user:// directory. This helps viewing large dictionaries which result in outpul overflow when printing. Returns: void Note user:// directory is located at %appdata%/Godot/app_userdata/PROJECT_NAME_HERE/ Type Parameter Default Description Dictionary to_save - The dictionary to be saved String filename saved_dict The name of the JSON file","title":"save_dict(to_save, filename?)"},{"location":"classes/helpers/#to_png_imagepng_bytes","text":"Converts the raw bytes of a PNG image to a Image Returns: Image Type Parameter PoolByteArray png_bytes","title":"to_png_image(png_bytes)"},{"location":"classes/helpers/#to_image_textureimage","text":"Converts an Image to a ImageTexture Returns: ImageTexture Type Parameter Image image","title":"to_image_texture(image)"},{"location":"classes/message/","text":"Message \u00b6 Entends: None Represents a message from, or to Discord. Description \u00b6 Stores all the data related to a message from Discord. It also has a few methods to manage the data in the message. Note To print a Message, use Message.print() instead of print(Message) Properties \u00b6 See Discord Message Structure Type Name Description String id The id of the message String channel_id The id of the channel from which the message originated String guild_id The id of the guild from which the message originated User author The User from which the message originated Dictionary member The partial guild member from which the message originated String content The text content of the message String timestamp ISO8601 timestamp when the message was sent String edited_timestamp ISO8601 timestamp when the message was edited (or null if never) bool tts Whether or not the message is text to speech bool mention_everyone Whether or not the message mentions everyone Array mentions An Array of User objects, with an additional partial member field Array mention_roles An Array of roles mentioned in the message (See Discord Role Structure ) Array mention_channels An Array of channels mentioned in the message (See Discord Channel Mention Structure ) Array attachments An Array of attachments in the message Array embeds An Array of embeds in the message Array reactions An Array of reactions of the message (See Discord Reaction Structure ) bool pinned Whether or not the message is pinned String type The type of the message Dictionary message_reference Data showing the source of a crosspost, channel follow add, pin or message reply Dictionary referenced_message The message associated with the message_reference Methods \u00b6 Returns Definition void print() void slice_attachments(index: int, delete_count?: int, replace_attachments?: Array) Method Descriptions \u00b6 print() \u00b6 Prints the Message Returns: void Note Use this instead of print(Message) slice_attachments(index, delete_count?, replace_attachments?) \u00b6 Removes, replaces, and inserts attachments in the Message Returns: void Note The maximum file size of the Message must be less than 8MB Type Parameter Defaults Description int index - The index of the first attachment in the attachments to be removed int delete_count 1 The number of attachments to remove Array replace_attachments [] The replacing attachments Each Attachment: See Discord Message Attachment Structure ) { id: String, the id of the attachment, filename: String, the name of the file attached, content_type: String, MIME type of the file, size: int, size of the file in bytes, url: String, source url of the file proxy_url: String, a proxied url of the file, height?: int, height of file (if image), width?: int, width of file (if image) }","title":"Message"},{"location":"classes/message/#message","text":"Entends: None Represents a message from, or to Discord.","title":"Message"},{"location":"classes/message/#description","text":"Stores all the data related to a message from Discord. It also has a few methods to manage the data in the message. Note To print a Message, use Message.print() instead of print(Message)","title":"Description"},{"location":"classes/message/#properties","text":"See Discord Message Structure Type Name Description String id The id of the message String channel_id The id of the channel from which the message originated String guild_id The id of the guild from which the message originated User author The User from which the message originated Dictionary member The partial guild member from which the message originated String content The text content of the message String timestamp ISO8601 timestamp when the message was sent String edited_timestamp ISO8601 timestamp when the message was edited (or null if never) bool tts Whether or not the message is text to speech bool mention_everyone Whether or not the message mentions everyone Array mentions An Array of User objects, with an additional partial member field Array mention_roles An Array of roles mentioned in the message (See Discord Role Structure ) Array mention_channels An Array of channels mentioned in the message (See Discord Channel Mention Structure ) Array attachments An Array of attachments in the message Array embeds An Array of embeds in the message Array reactions An Array of reactions of the message (See Discord Reaction Structure ) bool pinned Whether or not the message is pinned String type The type of the message Dictionary message_reference Data showing the source of a crosspost, channel follow add, pin or message reply Dictionary referenced_message The message associated with the message_reference","title":"Properties"},{"location":"classes/message/#methods","text":"Returns Definition void print() void slice_attachments(index: int, delete_count?: int, replace_attachments?: Array)","title":"Methods"},{"location":"classes/message/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"classes/message/#print","text":"Prints the Message Returns: void Note Use this instead of print(Message)","title":"print()"},{"location":"classes/message/#slice_attachmentsindex-delete_count-replace_attachments","text":"Removes, replaces, and inserts attachments in the Message Returns: void Note The maximum file size of the Message must be less than 8MB Type Parameter Defaults Description int index - The index of the first attachment in the attachments to be removed int delete_count 1 The number of attachments to remove Array replace_attachments [] The replacing attachments Each Attachment: See Discord Message Attachment Structure ) { id: String, the id of the attachment, filename: String, the name of the file attached, content_type: String, MIME type of the file, size: int, size of the file in bytes, url: String, source url of the file proxy_url: String, a proxied url of the file, height?: int, height of file (if image), width?: int, width of file (if image) }","title":"slice_attachments(index, delete_count?, replace_attachments?)"},{"location":"classes/messageactionrow/","text":"MessageActionRow \u00b6 Extends: None Represents an action row containing message components. Description \u00b6 Provides methods for adding and removing message compoenents from an action row. Properties \u00b6 Type Name Description Array components The components in this action row Methods \u00b6 Returns Definition MessageActionRow add_component(component: Variant)) void print()) MessageActionRow slice_components(index: int, delete_count: int, replace_components?: Array) Method Descriptions \u00b6 add_component(component) \u00b6 Adds a component to the action row. Returns: MessageActionRow Type Parameter MessageButton | SelectMenu component The MessageActionRow can have a maximum of 5 components. The MessageActionRow cannot contain another MessageActionRow . Examples \u00b6 Create and send a MessageButton var button = MessageButton.new().set_style(MessageButton.STYLES.DEFAULT)\\ .set_label(\"A\")\\ .set_custom_id(\"primary_custom\") var row = MessageActionRow.new().add_component(button) yield(bot.send(message, { \"components\": [row] })) slice_components(index, delete_count, replace_components?) \u00b6 Removes, replaces, and inserts components in the action row. Returns: MessageActionRow Type Parameter Description int index The starting index from which to start deletion int delete_count Number of components to delete (default is 1) Array replace_components An array of components to replace the deleted ones print() \u00b6 Prints the MessageActionRow Returns: void Note Use this instead of print(MessageActionRow)","title":"MessageActionRow"},{"location":"classes/messageactionrow/#messageactionrow","text":"Extends: None Represents an action row containing message components.","title":"MessageActionRow"},{"location":"classes/messageactionrow/#description","text":"Provides methods for adding and removing message compoenents from an action row.","title":"Description"},{"location":"classes/messageactionrow/#properties","text":"Type Name Description Array components The components in this action row","title":"Properties"},{"location":"classes/messageactionrow/#methods","text":"Returns Definition MessageActionRow add_component(component: Variant)) void print()) MessageActionRow slice_components(index: int, delete_count: int, replace_components?: Array)","title":"Methods"},{"location":"classes/messageactionrow/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"classes/messageactionrow/#add_componentcomponent","text":"Adds a component to the action row. Returns: MessageActionRow Type Parameter MessageButton | SelectMenu component The MessageActionRow can have a maximum of 5 components. The MessageActionRow cannot contain another MessageActionRow .","title":"add_component(component)"},{"location":"classes/messageactionrow/#examples","text":"Create and send a MessageButton var button = MessageButton.new().set_style(MessageButton.STYLES.DEFAULT)\\ .set_label(\"A\")\\ .set_custom_id(\"primary_custom\") var row = MessageActionRow.new().add_component(button) yield(bot.send(message, { \"components\": [row] }))","title":"Examples"},{"location":"classes/messageactionrow/#slice_componentsindex-delete_count-replace_components","text":"Removes, replaces, and inserts components in the action row. Returns: MessageActionRow Type Parameter Description int index The starting index from which to start deletion int delete_count Number of components to delete (default is 1) Array replace_components An array of components to replace the deleted ones","title":"slice_components(index, delete_count, replace_components?)"},{"location":"classes/messageactionrow/#print","text":"Prints the MessageActionRow Returns: void Note Use this instead of print(MessageActionRow)","title":"print()"},{"location":"classes/messagebutton/","text":"MessageButton \u00b6 Extends: None Represents a button message component. See Discord Button docs Description \u00b6 Provides methods for customising a message button. Enums \u00b6 STYLES \u00b6 { DEFAULT, PRIMARY, SECONDARY, SUCCESS, DANGER, LINK } Properties \u00b6 Type Name Description String custom_id The custom_id of the button String label The label of the button String url The url of the button (LINK button only) bool disabled Whether the button is disabled or not Dictionary emoji The emoji of the button Methods \u00b6 Returns Definition MessageButton set_style(style_type: MessageButton.STYLES) String get_style() MessageButton set_label(new_label: String) String get_label() MessageButton set_custom_id(new_custom_id: String) String get_custom_id() MessageButton set_url(new_url: String) String get_url() MessageButton set_disabled(new_value: bool) bool get_disabled() MessageButton set_emoji(new_emoji: Dictionary) Dictionary get_emoji() void print() Method Descriptions \u00b6 set_style(style_type) \u00b6 Sets the style of the button. Returns: MessageButton Examples \u00b6 Set the button style to LINK var button = MessageButton.new().set_style(MessageButton.STYLES.LINK) get_style() \u00b6 Returns the style of the button. Returns: String set_label(new_label) \u00b6 Sets the label of the button. Returns: MessageButton Type Parameter String new_label Examples \u00b6 Set the button label to \"Click Me\" var button = MessageButton.new().set_label(\"Click Me\") get_label() \u00b6 Returns the label of the button. Returns: String set_custom_id(new_custom_id) \u00b6 Sets the custom_id of the button. Returns: MessageButton Type Parameter String new_custom_id Examples \u00b6 Set the button custom_id to \"primary_button\" var button = MessageButton.new().set_custom_id(\"primary_button\") get_custom_id() \u00b6 Returns the custom_id of the button. Returns: String set_url(new_url) \u00b6 Sets the url of the button. Returns: MessageButton Type Parameter String new_url get_url() \u00b6 Returns the url of the button. Returns: String set_disabled(new_value) \u00b6 Sets the disabled state of the button. Returns: MessageButton Type Parameter bool new_value get_disabled() \u00b6 Returns whether the button is disabled or not. Returns: bool set_emoji(new_emoji) \u00b6 Sets the emoji of the button. new_emoji: Dictionary See Discord Emoji Structure { id: Id of the custom emoji, name?: Name of the custom emoji } Note This works only for Custom Emojis. The default ASCII emojis will not work. Its a limitation of Godot. Workaround for button emojis If you want to use the default ASCII emojis as an emoji for the button. 1. Add the emoji you want as a custom emoji on any server 2. Get the emoji id of the custom emoji 3. Use this id in the id field of the MessageButton.set_emoji() (See examples below) Examples \u00b6 Send a green checkmark emoji button var checkmark_button = MessageButton.new() checkmark_button.set_style(MessageButton.STYLES.SECONDARY) checkmark_button.set_custom_id(\"abcde\") # This id is a custom emoji id on the 3ddelano Cafe server checkmark_button.set_emoji({\"id\": \"556051807504433152\"}) var row = MessageActionRow.new().add_component(checkmark_button) bot.send(message.channel_id, { \"content\": \"This is a emoji button\", \"components\": [row] }) Send an animated parrot emoji button var parrot_button = MessageButton.new() parrot_button.set_style(MessageButton.STYLES.SECONDARY) parrot_button.set_custom_id(\"abcdefgh\") # This id is a custom animated emoji id on the 3ddelano Cafe server parrot_button.set_emoji({\"id\": \"565171769187500032\"}) var row = MessageActionRow.new().add_component(parrot_button) bot.send(message.channel_id, { \"content\": \"This is an animated emoji button\", \"components\": [row] }) get_emoji() \u00b6 Get the emoji of the button if it has one. Returns: Dictionary print() \u00b6 Prints the MessageButton. Returns: void Note Use this instead of print(MessageButton) Handling MessageButton Interactions \u00b6 MessageButton interactions are received via the DiscordBot.interaction_create signal. func _on_interaction_create(bot, interaction: DiscordInteraction): # Make sure the interaction is only from a MessageButton if not interaction.is_button(): return # Get the custom_id of the button var custom_id = interaction.data.custom_id match custom_id: \"my_button1\": # Handle my_button1 logic here interaction.reply({ \"content\": \"You pressed my_button1\" }) \"other_button2\": # Handle other_button2 logic here ...","title":"MessageButton"},{"location":"classes/messagebutton/#messagebutton","text":"Extends: None Represents a button message component. See Discord Button docs","title":"MessageButton"},{"location":"classes/messagebutton/#description","text":"Provides methods for customising a message button.","title":"Description"},{"location":"classes/messagebutton/#enums","text":"","title":"Enums"},{"location":"classes/messagebutton/#styles","text":"{ DEFAULT, PRIMARY, SECONDARY, SUCCESS, DANGER, LINK }","title":"STYLES"},{"location":"classes/messagebutton/#properties","text":"Type Name Description String custom_id The custom_id of the button String label The label of the button String url The url of the button (LINK button only) bool disabled Whether the button is disabled or not Dictionary emoji The emoji of the button","title":"Properties"},{"location":"classes/messagebutton/#methods","text":"Returns Definition MessageButton set_style(style_type: MessageButton.STYLES) String get_style() MessageButton set_label(new_label: String) String get_label() MessageButton set_custom_id(new_custom_id: String) String get_custom_id() MessageButton set_url(new_url: String) String get_url() MessageButton set_disabled(new_value: bool) bool get_disabled() MessageButton set_emoji(new_emoji: Dictionary) Dictionary get_emoji() void print()","title":"Methods"},{"location":"classes/messagebutton/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"classes/messagebutton/#set_stylestyle_type","text":"Sets the style of the button. Returns: MessageButton","title":"set_style(style_type)"},{"location":"classes/messagebutton/#examples","text":"Set the button style to LINK var button = MessageButton.new().set_style(MessageButton.STYLES.LINK)","title":"Examples"},{"location":"classes/messagebutton/#get_style","text":"Returns the style of the button. Returns: String","title":"get_style()"},{"location":"classes/messagebutton/#set_labelnew_label","text":"Sets the label of the button. Returns: MessageButton Type Parameter String new_label","title":"set_label(new_label)"},{"location":"classes/messagebutton/#examples_1","text":"Set the button label to \"Click Me\" var button = MessageButton.new().set_label(\"Click Me\")","title":"Examples"},{"location":"classes/messagebutton/#get_label","text":"Returns the label of the button. Returns: String","title":"get_label()"},{"location":"classes/messagebutton/#set_custom_idnew_custom_id","text":"Sets the custom_id of the button. Returns: MessageButton Type Parameter String new_custom_id","title":"set_custom_id(new_custom_id)"},{"location":"classes/messagebutton/#examples_2","text":"Set the button custom_id to \"primary_button\" var button = MessageButton.new().set_custom_id(\"primary_button\")","title":"Examples"},{"location":"classes/messagebutton/#get_custom_id","text":"Returns the custom_id of the button. Returns: String","title":"get_custom_id()"},{"location":"classes/messagebutton/#set_urlnew_url","text":"Sets the url of the button. Returns: MessageButton Type Parameter String new_url","title":"set_url(new_url)"},{"location":"classes/messagebutton/#get_url","text":"Returns the url of the button. Returns: String","title":"get_url()"},{"location":"classes/messagebutton/#set_disablednew_value","text":"Sets the disabled state of the button. Returns: MessageButton Type Parameter bool new_value","title":"set_disabled(new_value)"},{"location":"classes/messagebutton/#get_disabled","text":"Returns whether the button is disabled or not. Returns: bool","title":"get_disabled()"},{"location":"classes/messagebutton/#set_emojinew_emoji","text":"Sets the emoji of the button. new_emoji: Dictionary See Discord Emoji Structure { id: Id of the custom emoji, name?: Name of the custom emoji } Note This works only for Custom Emojis. The default ASCII emojis will not work. Its a limitation of Godot. Workaround for button emojis If you want to use the default ASCII emojis as an emoji for the button. 1. Add the emoji you want as a custom emoji on any server 2. Get the emoji id of the custom emoji 3. Use this id in the id field of the MessageButton.set_emoji() (See examples below)","title":"set_emoji(new_emoji)"},{"location":"classes/messagebutton/#examples_3","text":"Send a green checkmark emoji button var checkmark_button = MessageButton.new() checkmark_button.set_style(MessageButton.STYLES.SECONDARY) checkmark_button.set_custom_id(\"abcde\") # This id is a custom emoji id on the 3ddelano Cafe server checkmark_button.set_emoji({\"id\": \"556051807504433152\"}) var row = MessageActionRow.new().add_component(checkmark_button) bot.send(message.channel_id, { \"content\": \"This is a emoji button\", \"components\": [row] }) Send an animated parrot emoji button var parrot_button = MessageButton.new() parrot_button.set_style(MessageButton.STYLES.SECONDARY) parrot_button.set_custom_id(\"abcdefgh\") # This id is a custom animated emoji id on the 3ddelano Cafe server parrot_button.set_emoji({\"id\": \"565171769187500032\"}) var row = MessageActionRow.new().add_component(parrot_button) bot.send(message.channel_id, { \"content\": \"This is an animated emoji button\", \"components\": [row] })","title":"Examples"},{"location":"classes/messagebutton/#get_emoji","text":"Get the emoji of the button if it has one. Returns: Dictionary","title":"get_emoji()"},{"location":"classes/messagebutton/#print","text":"Prints the MessageButton. Returns: void Note Use this instead of print(MessageButton)","title":"print()"},{"location":"classes/messagebutton/#handling-messagebutton-interactions","text":"MessageButton interactions are received via the DiscordBot.interaction_create signal. func _on_interaction_create(bot, interaction: DiscordInteraction): # Make sure the interaction is only from a MessageButton if not interaction.is_button(): return # Get the custom_id of the button var custom_id = interaction.data.custom_id match custom_id: \"my_button1\": # Handle my_button1 logic here interaction.reply({ \"content\": \"You pressed my_button1\" }) \"other_button2\": # Handle other_button2 logic here ...","title":"Handling MessageButton Interactions"},{"location":"classes/messageflags/","text":"MessageFlags \u00b6 Extends: BitField Data structure that makes it easy to interact with the Message.flags bitfield. Description \u00b6 An extended data structure which defines the flags supported by a Message on Discord. See Discord Message Flags Docs Note This is a bitfield, so you can use the properties and methods of BitField . Flags \u00b6 Bit Flag 0 CROSSPOSTED 1 IS_CROSSPOST 2 SUPPRESS_EMBEDS 3 SOURCE_MESSAGE_DELETED 4 URGENT 5 HAS_THREAD 6 EPHEMERAL 7 LOADING","title":"MessageFlags"},{"location":"classes/messageflags/#messageflags","text":"Extends: BitField Data structure that makes it easy to interact with the Message.flags bitfield.","title":"MessageFlags"},{"location":"classes/messageflags/#description","text":"An extended data structure which defines the flags supported by a Message on Discord. See Discord Message Flags Docs Note This is a bitfield, so you can use the properties and methods of BitField .","title":"Description"},{"location":"classes/messageflags/#flags","text":"Bit Flag 0 CROSSPOSTED 1 IS_CROSSPOST 2 SUPPRESS_EMBEDS 3 SOURCE_MESSAGE_DELETED 4 URGENT 5 HAS_THREAD 6 EPHEMERAL 7 LOADING","title":"Flags"},{"location":"classes/selectmenu/","text":"SelectMenu \u00b6 Extends: None See Discord SelectMenu docs Represents a select menu component. Description \u00b6 Provides methods for customising a select menu. Properties \u00b6 Type Name Description String custom_id The custom_id of the menu Array options The options of this menu String placeholder? Optional placeholder to show if nothing is selected int min_values? Minimum items that must be chosen int max_values? Maximum items that must be chosen bool disabled Whether the menu is disabled or not Methods \u00b6 Returns Definition SelectMenu set_custom_id(new_custom_id: String) String get_custom_id() SelectMenu add_option(value: String, label: String, data: Dictionary) SelectMenu set_options(options: Array) Array get_options() SelectMenu set_placeholder(new_placeholder: String) String get_placeholder() SelectMenu set_min_values(new_min_values: int) int get_min_values() SelectMenu set_max_values(new_max_values: int) int get_max_values() SelectMenu set_disabled(new_value: bool) bool get_disabled() void print() Method Descriptions \u00b6 set_custom_id(new_custom_id) \u00b6 Sets the custom_id of the menu. Returns: SelectMenu Type Parameter String new_custom_id get_custom_id() \u00b6 Returns the custom_id of the menu. Returns: String add_option(value, label, data?) \u00b6 Add an option to the menu. Returns: SelectMenu See Discord SelectMenu option docs Type Parameter Description String value The dev-defined value of the option String label The user-facing name of the option Dictionary data Optional data for the option { # Only custom emojis are supported emoji: { id: \"ID_OF_CUSTOM_EMOJI\" }, \"description\": String, Description of the option \"default\": bool, Whether the option is selected by default } Examples \u00b6 Send a menu with a single option var menu = SelectMenu.new().set_custom_id(\"menu1\") menu.set_placeholder(\"Select an option\") menu.add_option(\"my_custom_option\", \"Buy a Parrot\", { \"description\": \"This is a nice parrot!\", \"emoji\": {\"id\": \"565171769187500032\"}, # Animated parrot emoji }) var row = MessageActionRow.new().add_component(menu) bot.send(message, { \"content\": \"Choose an item from the menu:\", \"components\": [row] }) Send a multi-select menu var menu = SelectMenu.new().set_custom_id(\"menu1\") menu.set_placeholder(\"Select an option\") # Add first option menu.add_option(\"parrot_option\", \"Buy a Parrot\", { \"description\": \"This is a nice parrot!\", \"emoji\": {\"id\": \"565171769187500032\"}, # Animated parrot emoji }) # Add second option menu.add_option(\"green_checkmark_option\", \"A checkmark\", { \"description\": \"A nice green checkmark\", \"emoji\": {\"id\": \"556051807504433152\"} # Green checkmark emoji }) # Set the max selectable items to 2 menu.set_max_values(2) var row = MessageActionRow.new().add_component(menu) bot.send(message, { \"content\": \"Choose item(s) from the menu:\", \"components\": [row] }) set_options(new_options) \u00b6 (For advanced users) Directly set the options of the menu by providing a Array of SelectMenu option. Returns: SelectMenu Type Parameter Array new_options get_options() \u00b6 Returns the options of the menu. Returns: Array set_placeholder(new_placeholder: String) \u00b6 Sets the placeholder of the menu. Returns: SelectMenu Type Parameter String new_placeholder get_placeholder() \u00b6 Returns the placeholder of the menu. Returns: String set_min_values(new_min_values) \u00b6 Sets the min_values of the menu. Returns: SelectMenu Type Parameter int new_min_values get_min_values() \u00b6 Returns the min_values of the menu. Returns: int set_max_values(new_max_values) \u00b6 Sets the max_values of the menu. Returns: SelectMenu Type Parameter int new_max_values get_max_values() \u00b6 Returns the max_values of the menu. Returns: int set_disabled(new_value) \u00b6 Sets the disabled state of the menu. Returns: SelectMenu get_disabled() \u00b6 Returns whether the menu is disabled or not. Returns: bool print() \u00b6 Prints the SelectMenu. Returns: void Note Use this instead of print(SelectMenu) Handling SelectMenu Interactions \u00b6 SelectMenu interactions are received via the DiscordBot.interaction_create signal. func _on_interaction_create(bot, interaction: DiscordInteraction): # Make sure the interaction is only from a SelectMenu if not interaction.is_select_menu(): return # Get the custom_id of the menu var custom_id = interaction.data.custom_id # Get the selected options var values = interaction.data.values match custom_id: \"menu1\": # Handle menu1 logic here var msg = \"You selected `\" msg += PoolStringArray(values).join(\"`, `\") msg += '`' interaction.reply({ \"content\": msg }) \"menu2\": # Handle menu2 logic here ...","title":"SelectMenu"},{"location":"classes/selectmenu/#selectmenu","text":"Extends: None See Discord SelectMenu docs Represents a select menu component.","title":"SelectMenu"},{"location":"classes/selectmenu/#description","text":"Provides methods for customising a select menu.","title":"Description"},{"location":"classes/selectmenu/#properties","text":"Type Name Description String custom_id The custom_id of the menu Array options The options of this menu String placeholder? Optional placeholder to show if nothing is selected int min_values? Minimum items that must be chosen int max_values? Maximum items that must be chosen bool disabled Whether the menu is disabled or not","title":"Properties"},{"location":"classes/selectmenu/#methods","text":"Returns Definition SelectMenu set_custom_id(new_custom_id: String) String get_custom_id() SelectMenu add_option(value: String, label: String, data: Dictionary) SelectMenu set_options(options: Array) Array get_options() SelectMenu set_placeholder(new_placeholder: String) String get_placeholder() SelectMenu set_min_values(new_min_values: int) int get_min_values() SelectMenu set_max_values(new_max_values: int) int get_max_values() SelectMenu set_disabled(new_value: bool) bool get_disabled() void print()","title":"Methods"},{"location":"classes/selectmenu/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"classes/selectmenu/#set_custom_idnew_custom_id","text":"Sets the custom_id of the menu. Returns: SelectMenu Type Parameter String new_custom_id","title":"set_custom_id(new_custom_id)"},{"location":"classes/selectmenu/#get_custom_id","text":"Returns the custom_id of the menu. Returns: String","title":"get_custom_id()"},{"location":"classes/selectmenu/#add_optionvalue-label-data","text":"Add an option to the menu. Returns: SelectMenu See Discord SelectMenu option docs Type Parameter Description String value The dev-defined value of the option String label The user-facing name of the option Dictionary data Optional data for the option { # Only custom emojis are supported emoji: { id: \"ID_OF_CUSTOM_EMOJI\" }, \"description\": String, Description of the option \"default\": bool, Whether the option is selected by default }","title":"add_option(value, label, data?)"},{"location":"classes/selectmenu/#examples","text":"Send a menu with a single option var menu = SelectMenu.new().set_custom_id(\"menu1\") menu.set_placeholder(\"Select an option\") menu.add_option(\"my_custom_option\", \"Buy a Parrot\", { \"description\": \"This is a nice parrot!\", \"emoji\": {\"id\": \"565171769187500032\"}, # Animated parrot emoji }) var row = MessageActionRow.new().add_component(menu) bot.send(message, { \"content\": \"Choose an item from the menu:\", \"components\": [row] }) Send a multi-select menu var menu = SelectMenu.new().set_custom_id(\"menu1\") menu.set_placeholder(\"Select an option\") # Add first option menu.add_option(\"parrot_option\", \"Buy a Parrot\", { \"description\": \"This is a nice parrot!\", \"emoji\": {\"id\": \"565171769187500032\"}, # Animated parrot emoji }) # Add second option menu.add_option(\"green_checkmark_option\", \"A checkmark\", { \"description\": \"A nice green checkmark\", \"emoji\": {\"id\": \"556051807504433152\"} # Green checkmark emoji }) # Set the max selectable items to 2 menu.set_max_values(2) var row = MessageActionRow.new().add_component(menu) bot.send(message, { \"content\": \"Choose item(s) from the menu:\", \"components\": [row] })","title":"Examples"},{"location":"classes/selectmenu/#set_optionsnew_options","text":"(For advanced users) Directly set the options of the menu by providing a Array of SelectMenu option. Returns: SelectMenu Type Parameter Array new_options","title":"set_options(new_options)"},{"location":"classes/selectmenu/#get_options","text":"Returns the options of the menu. Returns: Array","title":"get_options()"},{"location":"classes/selectmenu/#set_placeholdernew_placeholder-string","text":"Sets the placeholder of the menu. Returns: SelectMenu Type Parameter String new_placeholder","title":"set_placeholder(new_placeholder: String)"},{"location":"classes/selectmenu/#get_placeholder","text":"Returns the placeholder of the menu. Returns: String","title":"get_placeholder()"},{"location":"classes/selectmenu/#set_min_valuesnew_min_values","text":"Sets the min_values of the menu. Returns: SelectMenu Type Parameter int new_min_values","title":"set_min_values(new_min_values)"},{"location":"classes/selectmenu/#get_min_values","text":"Returns the min_values of the menu. Returns: int","title":"get_min_values()"},{"location":"classes/selectmenu/#set_max_valuesnew_max_values","text":"Sets the max_values of the menu. Returns: SelectMenu Type Parameter int new_max_values","title":"set_max_values(new_max_values)"},{"location":"classes/selectmenu/#get_max_values","text":"Returns the max_values of the menu. Returns: int","title":"get_max_values()"},{"location":"classes/selectmenu/#set_disablednew_value","text":"Sets the disabled state of the menu. Returns: SelectMenu","title":"set_disabled(new_value)"},{"location":"classes/selectmenu/#get_disabled","text":"Returns whether the menu is disabled or not. Returns: bool","title":"get_disabled()"},{"location":"classes/selectmenu/#print","text":"Prints the SelectMenu. Returns: void Note Use this instead of print(SelectMenu)","title":"print()"},{"location":"classes/selectmenu/#handling-selectmenu-interactions","text":"SelectMenu interactions are received via the DiscordBot.interaction_create signal. func _on_interaction_create(bot, interaction: DiscordInteraction): # Make sure the interaction is only from a SelectMenu if not interaction.is_select_menu(): return # Get the custom_id of the menu var custom_id = interaction.data.custom_id # Get the selected options var values = interaction.data.values match custom_id: \"menu1\": # Handle menu1 logic here var msg = \"You selected `\" msg += PoolStringArray(values).join(\"`, `\") msg += '`' interaction.reply({ \"content\": msg }) \"menu2\": # Handle menu2 logic here ...","title":"Handling SelectMenu Interactions"},{"location":"classes/user/","text":"User \u00b6 Extends: None Represents a user on Discord. Description \u00b6 Stores all the data related to a user from Discord. It also has a few methods to manage the user data. Properties \u00b6 See Discord User Structure Type Name Description String id The id of the user String username The username of the user String discriminator The discriminator of the user String avatar The avatar hash of the user bool bot Whether or not the user is a bot bool system Wheter or not the user is an Official Discord System user bool mfa_enabled Whether or not the user has two factor enabled on their account String locale The chosen language of the user bool verified Whether or not user's email is verified String email The email of the user int flags The flags of the user (See Discord User Flags ) int premium_type The type of Nitro subscription of the user (See Discord Premium Types ) int public_flags The public flags of the user (See Discord User Flags ) Methods \u00b6 Returns Definition PoolByteArray get_default_avatar() String get_default_avatar_url() PoolByteArray get_display_avatar(options?: Dictionary) String get_display_avatar_url(options?: Dictionary) Method Descriptions \u00b6 get_display_avatar_url(options?) \u00b6 Returns the url of the user's avatar icon Returns: String Note If the user has no avatar, the default avatar url will be returned options: Dictionary { format: String, one of \"webp\", \"png\", \"jpg\", \"jpeg\", \"gif\" (default \"png\"), size: int, one of 16, 32, 64, 128, 256, 512, 1024, 2048, 4096 (default 256), dynamic: bool, if true the format will automatically change to gif for animated avatars (default false) } Examples \u00b6 Get the user's avatar and use in an embed var avatar_url = message.author.get_display_avatar_url() var embed = Embed.new().set_image(avatar_url) bot.send(message, {\"embeds\": [embed]}) get_default_avatar_url() \u00b6 Returns the url of the user's default avatar icon Returns: String get_display_avatar(options?) \u00b6 Returns the raw bytes of the user's avatar icon Returns: Promise Note To get the avatar as an Image or ImageTexture use Helpers.to_png_image() and Helpers.to_image_texture() Note If the user has no avatar set, the default avatar will be returned options: Dictionary { format: String, one of \"webp\", \"png\", \"jpg\", \"jpeg\", \"gif\" (default \"png\"), size: int, one of 16, 32, 64, 128, 256, 512, 1024, 2048, 4096 (default 256), dynamic: bool, if true the format will automatically change to gif for animated avatars (default false) } Examples \u00b6 Get the user's avatar as a PNG ImageTexture # Note: The yield is to ensure that the avatar is received var bytes = yield(user.get_display_avatar(), \"completed\") # Convert the bytes to an Image var image = Helpers.to_png_image(bytes) # Convert the Image to ImageTexture var texture = Helpers.to_image_texture(image) Gets the user's avatar as a GIF automatically # Gets the GIF bytes if the user has an animated avatar var bytes = yield(user.get_display_avatar({ \"dynamic\": true }), \"completed\") # Reply with the user's avatar as a GIF bot.reply(message, { \"content\": \"Your avatar is...\", \"files\": [ { \"name\": \"avatar.gif\", \"media_type\": \"image/gif\", \"data\": bytes } ] }) get_default_avatar() \u00b6 Returns the raw bytes of the user's default avatar icon Returns: Promise Note To get the avatar as an Image or ImageTexture use Helpers.to_png_image() and Helpers.to_image_texture()","title":"User"},{"location":"classes/user/#user","text":"Extends: None Represents a user on Discord.","title":"User"},{"location":"classes/user/#description","text":"Stores all the data related to a user from Discord. It also has a few methods to manage the user data.","title":"Description"},{"location":"classes/user/#properties","text":"See Discord User Structure Type Name Description String id The id of the user String username The username of the user String discriminator The discriminator of the user String avatar The avatar hash of the user bool bot Whether or not the user is a bot bool system Wheter or not the user is an Official Discord System user bool mfa_enabled Whether or not the user has two factor enabled on their account String locale The chosen language of the user bool verified Whether or not user's email is verified String email The email of the user int flags The flags of the user (See Discord User Flags ) int premium_type The type of Nitro subscription of the user (See Discord Premium Types ) int public_flags The public flags of the user (See Discord User Flags )","title":"Properties"},{"location":"classes/user/#methods","text":"Returns Definition PoolByteArray get_default_avatar() String get_default_avatar_url() PoolByteArray get_display_avatar(options?: Dictionary) String get_display_avatar_url(options?: Dictionary)","title":"Methods"},{"location":"classes/user/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"classes/user/#get_display_avatar_urloptions","text":"Returns the url of the user's avatar icon Returns: String Note If the user has no avatar, the default avatar url will be returned options: Dictionary { format: String, one of \"webp\", \"png\", \"jpg\", \"jpeg\", \"gif\" (default \"png\"), size: int, one of 16, 32, 64, 128, 256, 512, 1024, 2048, 4096 (default 256), dynamic: bool, if true the format will automatically change to gif for animated avatars (default false) }","title":"get_display_avatar_url(options?)"},{"location":"classes/user/#examples","text":"Get the user's avatar and use in an embed var avatar_url = message.author.get_display_avatar_url() var embed = Embed.new().set_image(avatar_url) bot.send(message, {\"embeds\": [embed]})","title":"Examples"},{"location":"classes/user/#get_default_avatar_url","text":"Returns the url of the user's default avatar icon Returns: String","title":"get_default_avatar_url()"},{"location":"classes/user/#get_display_avataroptions","text":"Returns the raw bytes of the user's avatar icon Returns: Promise Note To get the avatar as an Image or ImageTexture use Helpers.to_png_image() and Helpers.to_image_texture() Note If the user has no avatar set, the default avatar will be returned options: Dictionary { format: String, one of \"webp\", \"png\", \"jpg\", \"jpeg\", \"gif\" (default \"png\"), size: int, one of 16, 32, 64, 128, 256, 512, 1024, 2048, 4096 (default 256), dynamic: bool, if true the format will automatically change to gif for animated avatars (default false) }","title":"get_display_avatar(options?)"},{"location":"classes/user/#examples_1","text":"Get the user's avatar as a PNG ImageTexture # Note: The yield is to ensure that the avatar is received var bytes = yield(user.get_display_avatar(), \"completed\") # Convert the bytes to an Image var image = Helpers.to_png_image(bytes) # Convert the Image to ImageTexture var texture = Helpers.to_image_texture(image) Gets the user's avatar as a GIF automatically # Gets the GIF bytes if the user has an animated avatar var bytes = yield(user.get_display_avatar({ \"dynamic\": true }), \"completed\") # Reply with the user's avatar as a GIF bot.reply(message, { \"content\": \"Your avatar is...\", \"files\": [ { \"name\": \"avatar.gif\", \"media_type\": \"image/gif\", \"data\": bytes } ] })","title":"Examples"},{"location":"classes/user/#get_default_avatar","text":"Returns the raw bytes of the user's default avatar icon Returns: Promise Note To get the avatar as an Image or ImageTexture use Helpers.to_png_image() and Helpers.to_image_texture()","title":"get_default_avatar()"}]}